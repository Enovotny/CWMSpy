# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cda_client.api_client import ApiClient


class RatingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_cwms_data_ratings_spec_with_rating_id(self, rating_id, office, method, **kwargs):  # noqa: E501
        """Delete cwmsData ratings spec with ratingId  # noqa: E501

        Deletes requested rating specification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_ratings_spec_with_rating_id(rating_id, office, method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rating_id: The rating-spec-id of the ratings data to be deleted. (required)
        :param str office: Specifies the owning office of the ratings to be deleted. (required)
        :param DeleteMethod method: Specifies the delete method used. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cwms_data_ratings_spec_with_rating_id_with_http_info(rating_id, office, method, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cwms_data_ratings_spec_with_rating_id_with_http_info(rating_id, office, method, **kwargs)  # noqa: E501
            return data

    def delete_cwms_data_ratings_spec_with_rating_id_with_http_info(self, rating_id, office, method, **kwargs):  # noqa: E501
        """Delete cwmsData ratings spec with ratingId  # noqa: E501

        Deletes requested rating specification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_ratings_spec_with_rating_id_with_http_info(rating_id, office, method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rating_id: The rating-spec-id of the ratings data to be deleted. (required)
        :param str office: Specifies the owning office of the ratings to be deleted. (required)
        :param DeleteMethod method: Specifies the delete method used. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rating_id', 'office', 'method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cwms_data_ratings_spec_with_rating_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rating_id' is set
        if ('rating_id' not in params or
                params['rating_id'] is None):
            raise ValueError("Missing the required parameter `rating_id` when calling `delete_cwms_data_ratings_spec_with_rating_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `delete_cwms_data_ratings_spec_with_rating_id`")  # noqa: E501
        # verify the required parameter 'method' is set
        if ('method' not in params or
                params['method'] is None):
            raise ValueError("Missing the required parameter `method` when calling `delete_cwms_data_ratings_spec_with_rating_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rating_id' in params:
            path_params['rating-id'] = params['rating_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/spec/{rating-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cwms_data_ratings_template_with_template_id(self, template_id, office, method, **kwargs):  # noqa: E501
        """Delete cwmsData ratings template with templateId  # noqa: E501

        Deletes requested rating specification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_ratings_template_with_template_id(template_id, office, method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: The rating-template-id of the ratings data to be deleted. (required)
        :param str office: Specifies the owning office of the ratings to be deleted. (required)
        :param DeleteMethod method: Specifies the delete method used. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cwms_data_ratings_template_with_template_id_with_http_info(template_id, office, method, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cwms_data_ratings_template_with_template_id_with_http_info(template_id, office, method, **kwargs)  # noqa: E501
            return data

    def delete_cwms_data_ratings_template_with_template_id_with_http_info(self, template_id, office, method, **kwargs):  # noqa: E501
        """Delete cwmsData ratings template with templateId  # noqa: E501

        Deletes requested rating specification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_ratings_template_with_template_id_with_http_info(template_id, office, method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: The rating-template-id of the ratings data to be deleted. (required)
        :param str office: Specifies the owning office of the ratings to be deleted. (required)
        :param DeleteMethod method: Specifies the delete method used. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'office', 'method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cwms_data_ratings_template_with_template_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `delete_cwms_data_ratings_template_with_template_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `delete_cwms_data_ratings_template_with_template_id`")  # noqa: E501
        # verify the required parameter 'method' is set
        if ('method' not in params or
                params['method'] is None):
            raise ValueError("Missing the required parameter `method` when calling `delete_cwms_data_ratings_template_with_template_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/template/{template-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cwms_data_ratings_with_rating_id(self, rating_id, office, begin, end, **kwargs):  # noqa: E501
        """Delete cwmsData ratings with ratingId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_ratings_with_rating_id(rating_id, office, begin, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rating_id: The rating-id of the effective dates to be deleted.  (required)
        :param str office: Specifies the office of the ratings to be deleted. (required)
        :param str begin: The start of the time window to delete. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'. (required)
        :param str end: The end of the time window to delete.The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'. (required)
        :param str timezone: This field specifies a default timezone to be used if the format of the begin, end, or version-date parameters do not include offset or time zone information. Defaults to UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cwms_data_ratings_with_rating_id_with_http_info(rating_id, office, begin, end, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cwms_data_ratings_with_rating_id_with_http_info(rating_id, office, begin, end, **kwargs)  # noqa: E501
            return data

    def delete_cwms_data_ratings_with_rating_id_with_http_info(self, rating_id, office, begin, end, **kwargs):  # noqa: E501
        """Delete cwmsData ratings with ratingId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_ratings_with_rating_id_with_http_info(rating_id, office, begin, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rating_id: The rating-id of the effective dates to be deleted.  (required)
        :param str office: Specifies the office of the ratings to be deleted. (required)
        :param str begin: The start of the time window to delete. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'. (required)
        :param str end: The end of the time window to delete.The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'. (required)
        :param str timezone: This field specifies a default timezone to be used if the format of the begin, end, or version-date parameters do not include offset or time zone information. Defaults to UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rating_id', 'office', 'begin', 'end', 'timezone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cwms_data_ratings_with_rating_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rating_id' is set
        if ('rating_id' not in params or
                params['rating_id'] is None):
            raise ValueError("Missing the required parameter `rating_id` when calling `delete_cwms_data_ratings_with_rating_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `delete_cwms_data_ratings_with_rating_id`")  # noqa: E501
        # verify the required parameter 'begin' is set
        if ('begin' not in params or
                params['begin'] is None):
            raise ValueError("Missing the required parameter `begin` when calling `delete_cwms_data_ratings_with_rating_id`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `delete_cwms_data_ratings_with_rating_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rating_id' in params:
            path_params['rating-id'] = params['rating_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'begin' in params:
            query_params.append(('begin', params['begin']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/{rating-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_ratings(self, **kwargs):  # noqa: E501
        """Get cwmsData ratings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Specifies the name(s) of the rating whose data is to be included in the response. A case insensitive comparison is used to match names.
        :param str office: Specifies the owning office of the Rating(s) whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:  1. EN.   Specifies English unit system.  Rating values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Rating values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
        :param str datum: Specifies the elevation datum of the response. This field affects only elevation Ratings. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum.
        :param str at: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
        :param str end: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
        :param str format: Specifies the encoding format of the response. Valid values for the format field for this URI are:  1.    tab  2.    csv  3.    xml  4.    json (default)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_ratings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_ratings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cwms_data_ratings_with_http_info(self, **kwargs):  # noqa: E501
        """Get cwmsData ratings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Specifies the name(s) of the rating whose data is to be included in the response. A case insensitive comparison is used to match names.
        :param str office: Specifies the owning office of the Rating(s) whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:  1. EN.   Specifies English unit system.  Rating values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Rating values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
        :param str datum: Specifies the elevation datum of the response. This field affects only elevation Ratings. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum.
        :param str at: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
        :param str end: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
        :param str format: Specifies the encoding format of the response. Valid values for the format field for this URI are:  1.    tab  2.    csv  3.    xml  4.    json (default)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'office', 'unit', 'datum', 'at', 'end', 'timezone', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_ratings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
        if 'datum' in params:
            query_params.append(('datum', params['datum']))  # noqa: E501
        if 'at' in params:
            query_params.append(('at', params['at']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/tab-separated-values', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Unit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_ratings_metadata(self, **kwargs):  # noqa: E501
        """Get cwmsData ratings metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_metadata(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str rating_id_mask: RegExp that specifies the rating IDs to be included in the response. If this field is not specified, all Rating Specs shall be returned.
        :param str start: Specifies the start of the time window of the effective dates to be included. If this field is not specified no start time will be used.
        :param str end: Specifies the end of the time window for effective dates to be included. If this field is not specified no end time will be used.
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param int page_size: How many entries per page returned. Default 50.
        :return: RatingMetadataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_ratings_metadata_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_ratings_metadata_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cwms_data_ratings_metadata_with_http_info(self, **kwargs):  # noqa: E501
        """Get cwmsData ratings metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_metadata_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str rating_id_mask: RegExp that specifies the rating IDs to be included in the response. If this field is not specified, all Rating Specs shall be returned.
        :param str start: Specifies the start of the time window of the effective dates to be included. If this field is not specified no start time will be used.
        :param str end: Specifies the end of the time window for effective dates to be included. If this field is not specified no end time will be used.
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param int page_size: How many entries per page returned. Default 50.
        :return: RatingMetadataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office', 'rating_id_mask', 'start', 'end', 'timezone', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_ratings_metadata" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'rating_id_mask' in params:
            query_params.append(('rating-id-mask', params['rating_id_mask']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingMetadataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_ratings_spec(self, **kwargs):  # noqa: E501
        """Get cwmsData ratings spec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_spec(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str rating_id_mask: Posix <a href=\"regexp.html\">regular expression</a>  that specifies the rating IDs to be included in the response. If this field is not specified, all Rating Specs shall be returned.
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param int page_size: How many entries per page returned. Default 100.
        :return: RatingSpecs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_ratings_spec_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_ratings_spec_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cwms_data_ratings_spec_with_http_info(self, **kwargs):  # noqa: E501
        """Get cwmsData ratings spec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_spec_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str rating_id_mask: Posix <a href=\"regexp.html\">regular expression</a>  that specifies the rating IDs to be included in the response. If this field is not specified, all Rating Specs shall be returned.
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param int page_size: How many entries per page returned. Default 100.
        :return: RatingSpecs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office', 'rating_id_mask', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_ratings_spec" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'rating_id_mask' in params:
            query_params.append(('rating-id-mask', params['rating_id_mask']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/spec', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingSpecs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_ratings_spec_with_rating_id(self, rating_id, office, **kwargs):  # noqa: E501
        """Get cwmsData ratings spec with ratingId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_spec_with_rating_id(rating_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rating_id: Specifies the rating-id of the Rating Spec to be included in the response (required)
        :param str office: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned. (required)
        :return: RatingSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_ratings_spec_with_rating_id_with_http_info(rating_id, office, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_ratings_spec_with_rating_id_with_http_info(rating_id, office, **kwargs)  # noqa: E501
            return data

    def get_cwms_data_ratings_spec_with_rating_id_with_http_info(self, rating_id, office, **kwargs):  # noqa: E501
        """Get cwmsData ratings spec with ratingId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_spec_with_rating_id_with_http_info(rating_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rating_id: Specifies the rating-id of the Rating Spec to be included in the response (required)
        :param str office: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned. (required)
        :return: RatingSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rating_id', 'office']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_ratings_spec_with_rating_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rating_id' is set
        if ('rating_id' not in params or
                params['rating_id'] is None):
            raise ValueError("Missing the required parameter `rating_id` when calling `get_cwms_data_ratings_spec_with_rating_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `get_cwms_data_ratings_spec_with_rating_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rating_id' in params:
            path_params['rating-id'] = params['rating_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/spec/{rating-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingSpec',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_ratings_template(self, **kwargs):  # noqa: E501
        """Get cwmsData ratings template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the Rating Templates whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str template_id_mask: RegExp that specifies the rating template IDs to be included in the response. If this field is not specified, all rating templates shall be returned.
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param int page_size: How many entries per page returned. Default 100.
        :return: RatingTemplates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_ratings_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_ratings_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cwms_data_ratings_template_with_http_info(self, **kwargs):  # noqa: E501
        """Get cwmsData ratings template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the Rating Templates whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str template_id_mask: RegExp that specifies the rating template IDs to be included in the response. If this field is not specified, all rating templates shall be returned.
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param int page_size: How many entries per page returned. Default 100.
        :return: RatingTemplates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office', 'template_id_mask', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_ratings_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'template_id_mask' in params:
            query_params.append(('template-id-mask', params['template_id_mask']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingTemplates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_ratings_template_with_template_id(self, template_id, office, **kwargs):  # noqa: E501
        """Get cwmsData ratings template with templateId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_template_with_template_id(template_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: Specifies the template whose data is to be included in the response (required)
        :param str office: Specifies the owning office of the Rating Templates whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned. (required)
        :return: list[RatingTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_ratings_template_with_template_id_with_http_info(template_id, office, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_ratings_template_with_template_id_with_http_info(template_id, office, **kwargs)  # noqa: E501
            return data

    def get_cwms_data_ratings_template_with_template_id_with_http_info(self, template_id, office, **kwargs):  # noqa: E501
        """Get cwmsData ratings template with templateId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_template_with_template_id_with_http_info(template_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: Specifies the template whose data is to be included in the response (required)
        :param str office: Specifies the owning office of the Rating Templates whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned. (required)
        :return: list[RatingTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'office']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_ratings_template_with_template_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_cwms_data_ratings_template_with_template_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `get_cwms_data_ratings_template_with_template_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/template/{template-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RatingTemplate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_ratings_with_rating_id(self, rating_id, office, **kwargs):  # noqa: E501
        """Get cwmsData ratings with ratingId  # noqa: E501

        Returns CWMS Rating Data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_with_rating_id(rating_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rating_id: The rating-id of the effective dates to be retrieve.  (required)
        :param str office: Specifies the owning office of the ratingset to be included in the response. (required)
        :param str begin: Specifies the start of the time window for data to be included in the response. If this field is not specified no start time will be used.
        :param str end: Specifies the end of the time window for data to be included in the response. If this field is not specified no end time will be used.
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
        :param DatabaseLoadMethod method: Specifies the retrieval method used.  If no method is provided EAGER will be used.
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_ratings_with_rating_id_with_http_info(rating_id, office, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_ratings_with_rating_id_with_http_info(rating_id, office, **kwargs)  # noqa: E501
            return data

    def get_cwms_data_ratings_with_rating_id_with_http_info(self, rating_id, office, **kwargs):  # noqa: E501
        """Get cwmsData ratings with ratingId  # noqa: E501

        Returns CWMS Rating Data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_ratings_with_rating_id_with_http_info(rating_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rating_id: The rating-id of the effective dates to be retrieve.  (required)
        :param str office: Specifies the owning office of the ratingset to be included in the response. (required)
        :param str begin: Specifies the start of the time window for data to be included in the response. If this field is not specified no start time will be used.
        :param str end: Specifies the end of the time window for data to be included in the response. If this field is not specified no end time will be used.
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
        :param DatabaseLoadMethod method: Specifies the retrieval method used.  If no method is provided EAGER will be used.
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rating_id', 'office', 'begin', 'end', 'timezone', 'method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_ratings_with_rating_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rating_id' is set
        if ('rating_id' not in params or
                params['rating_id'] is None):
            raise ValueError("Missing the required parameter `rating_id` when calling `get_cwms_data_ratings_with_rating_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `get_cwms_data_ratings_with_rating_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rating_id' in params:
            path_params['rating-id'] = params['rating_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'begin' in params:
            query_params.append(('begin', params['begin']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/{rating-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Unit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_cwms_data_ratings_with_rating_id(self, body, rating_id, **kwargs):  # noqa: E501
        """Patch cwmsData ratings with ratingId  # noqa: E501

        Update a RatingSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_ratings_with_rating_id(body, rating_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Unit body: (required)
        :param str rating_id: (required)
        :param bool store_template: Also store updates to the rating template. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_cwms_data_ratings_with_rating_id_with_http_info(body, rating_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_cwms_data_ratings_with_rating_id_with_http_info(body, rating_id, **kwargs)  # noqa: E501
            return data

    def patch_cwms_data_ratings_with_rating_id_with_http_info(self, body, rating_id, **kwargs):  # noqa: E501
        """Patch cwmsData ratings with ratingId  # noqa: E501

        Update a RatingSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_ratings_with_rating_id_with_http_info(body, rating_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Unit body: (required)
        :param str rating_id: (required)
        :param bool store_template: Also store updates to the rating template. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'rating_id', 'store_template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_cwms_data_ratings_with_rating_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_cwms_data_ratings_with_rating_id`")  # noqa: E501
        # verify the required parameter 'rating_id' is set
        if ('rating_id' not in params or
                params['rating_id'] is None):
            raise ValueError("Missing the required parameter `rating_id` when calling `patch_cwms_data_ratings_with_rating_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rating_id' in params:
            path_params['rating-id'] = params['rating_id']  # noqa: E501

        query_params = []
        if 'store_template' in params:
            query_params.append(('store-template', params['store_template']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml;version=2', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/{rating-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cwms_data_ratings(self, body, **kwargs):  # noqa: E501
        """Post cwmsData ratings  # noqa: E501

        Create new RatingSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_ratings(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Unit body: (required)
        :param bool store_template: Also store updates to the rating template. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cwms_data_ratings_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cwms_data_ratings_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cwms_data_ratings_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post cwmsData ratings  # noqa: E501

        Create new RatingSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_ratings_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Unit body: (required)
        :param bool store_template: Also store updates to the rating template. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'store_template']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cwms_data_ratings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cwms_data_ratings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_template' in params:
            query_params.append(('store-template', params['store_template']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml;version=2', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cwms_data_ratings_spec(self, body, **kwargs):  # noqa: E501
        """Post cwmsData ratings spec  # noqa: E501

        Create new Rating Specification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_ratings_spec(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSpec body: (required)
        :param bool fail_if_exists: Create will fail if provided ID already exists. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cwms_data_ratings_spec_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cwms_data_ratings_spec_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cwms_data_ratings_spec_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post cwmsData ratings spec  # noqa: E501

        Create new Rating Specification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_ratings_spec_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSpec body: (required)
        :param bool fail_if_exists: Create will fail if provided ID already exists. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fail_if_exists']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cwms_data_ratings_spec" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cwms_data_ratings_spec`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fail_if_exists' in params:
            query_params.append(('fail-if-exists', params['fail_if_exists']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/spec', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cwms_data_ratings_template(self, body, **kwargs):  # noqa: E501
        """Post cwmsData ratings template  # noqa: E501

        Create new Rating Template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_ratings_template(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingTemplate body: (required)
        :param bool fail_if_exists: Create will fail if provided ID already exists. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cwms_data_ratings_template_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cwms_data_ratings_template_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cwms_data_ratings_template_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post cwmsData ratings template  # noqa: E501

        Create new Rating Template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_ratings_template_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingTemplate body: (required)
        :param bool fail_if_exists: Create will fail if provided ID already exists. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fail_if_exists']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cwms_data_ratings_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cwms_data_ratings_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fail_if_exists' in params:
            query_params.append(('fail-if-exists', params['fail_if_exists']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/ratings/template', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
