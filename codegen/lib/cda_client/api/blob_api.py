# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cda_client.api_client import ApiClient


class BlobApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_cwms_data_blobs(self, **kwargs):  # noqa: E501
        """Get cwmsData blobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_blobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office. If this field is not specified, matching information from all offices shall be returned.
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param str cursor: Deprecated. Use 'page' instead.
        :param int page_size: Deprecated.  Use page-size instead.
        :param int page_size: How many entries per page returned. Default 20.
        :param str like: Posix <a href=\"regexp.html\">regular expression</a> describing the blob id's you want
        :return: Blobs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_blobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_blobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cwms_data_blobs_with_http_info(self, **kwargs):  # noqa: E501
        """Get cwmsData blobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_blobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office. If this field is not specified, matching information from all offices shall be returned.
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param str cursor: Deprecated. Use 'page' instead.
        :param int page_size: Deprecated.  Use page-size instead.
        :param int page_size: How many entries per page returned. Default 20.
        :param str like: Posix <a href=\"regexp.html\">regular expression</a> describing the blob id's you want
        :return: Blobs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office', 'page', 'cursor', 'page_size', 'page_size', 'like']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_blobs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501
        if 'like' in params:
            query_params.append(('like', params['like']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/blobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Blobs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_blobs_with_blob_id(self, blob_id, **kwargs):  # noqa: E501
        """Get cwmsData blobs with blobId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_blobs_with_blob_id(blob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blob_id: (required)
        :param str office: Specifies the owning office.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_blobs_with_blob_id_with_http_info(blob_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_blobs_with_blob_id_with_http_info(blob_id, **kwargs)  # noqa: E501
            return data

    def get_cwms_data_blobs_with_blob_id_with_http_info(self, blob_id, **kwargs):  # noqa: E501
        """Get cwmsData blobs with blobId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_blobs_with_blob_id_with_http_info(blob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blob_id: (required)
        :param str office: Specifies the owning office.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blob_id', 'office']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_blobs_with_blob_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blob_id' is set
        if ('blob_id' not in params or
                params['blob_id'] is None):
            raise ValueError("Missing the required parameter `blob_id` when calling `get_cwms_data_blobs_with_blob_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'blob_id' in params:
            path_params['blob-id'] = params['blob_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/blobs/{blob-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
