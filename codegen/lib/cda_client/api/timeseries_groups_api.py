# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cda_client.api_client import ApiClient


class TimeseriesGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_cwms_data_timeseries_group_with_group_id(self, group_id, category_id, office, **kwargs):  # noqa: E501
        """Delete cwmsData timeseries group with groupId  # noqa: E501

        Deletes requested time series group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_timeseries_group_with_group_id(group_id, category_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The time series group to be deleted (required)
        :param str category_id: Specifies the time series category of the time series group to be deleted (required)
        :param str office: Specifies the owning office of the time series group to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cwms_data_timeseries_group_with_group_id_with_http_info(group_id, category_id, office, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cwms_data_timeseries_group_with_group_id_with_http_info(group_id, category_id, office, **kwargs)  # noqa: E501
            return data

    def delete_cwms_data_timeseries_group_with_group_id_with_http_info(self, group_id, category_id, office, **kwargs):  # noqa: E501
        """Delete cwmsData timeseries group with groupId  # noqa: E501

        Deletes requested time series group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_timeseries_group_with_group_id_with_http_info(group_id, category_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The time series group to be deleted (required)
        :param str category_id: Specifies the time series category of the time series group to be deleted (required)
        :param str office: Specifies the owning office of the time series group to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'category_id', 'office']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cwms_data_timeseries_group_with_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_cwms_data_timeseries_group_with_group_id`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `delete_cwms_data_timeseries_group_with_group_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `delete_cwms_data_timeseries_group_with_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []
        if 'category_id' in params:
            query_params.append(('category-id', params['category_id']))  # noqa: E501
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/timeseries/group/{group-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_timeseries_group(self, **kwargs):  # noqa: E501
        """Get cwmsData timeseries group  # noqa: E501

        Returns CWMS Timeseries Groups Data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_timeseries_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the timeseries group(s) whose data is to be included in the response. If this field is not specified, matching timeseries groups information from all offices shall be returned.
        :return: list[TimeSeriesGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_timeseries_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_timeseries_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cwms_data_timeseries_group_with_http_info(self, **kwargs):  # noqa: E501
        """Get cwmsData timeseries group  # noqa: E501

        Returns CWMS Timeseries Groups Data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_timeseries_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the timeseries group(s) whose data is to be included in the response. If this field is not specified, matching timeseries groups information from all offices shall be returned.
        :return: list[TimeSeriesGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_timeseries_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/timeseries/group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TimeSeriesGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_timeseries_group_with_group_id(self, group_id, office, category_id, **kwargs):  # noqa: E501
        """Get cwmsData timeseries group with groupId  # noqa: E501

        Retrieves requested timeseries group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_timeseries_group_with_group_id(group_id, office, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Specifies the timeseries group whose data is to be included in the response (required)
        :param str office: Specifies the owning office of the timeseries group whose data is to be included in the response. (required)
        :param str category_id: Specifies the category containing the timeseries group whose data is to be included in the response. (required)
        :return: TimeSeriesGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_timeseries_group_with_group_id_with_http_info(group_id, office, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_timeseries_group_with_group_id_with_http_info(group_id, office, category_id, **kwargs)  # noqa: E501
            return data

    def get_cwms_data_timeseries_group_with_group_id_with_http_info(self, group_id, office, category_id, **kwargs):  # noqa: E501
        """Get cwmsData timeseries group with groupId  # noqa: E501

        Retrieves requested timeseries group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_timeseries_group_with_group_id_with_http_info(group_id, office, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Specifies the timeseries group whose data is to be included in the response (required)
        :param str office: Specifies the owning office of the timeseries group whose data is to be included in the response. (required)
        :param str category_id: Specifies the category containing the timeseries group whose data is to be included in the response. (required)
        :return: TimeSeriesGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'office', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_timeseries_group_with_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_cwms_data_timeseries_group_with_group_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `get_cwms_data_timeseries_group_with_group_id`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `get_cwms_data_timeseries_group_with_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'category_id' in params:
            query_params.append(('category-id', params['category_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/timeseries/group/{group-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeSeriesGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_cwms_data_timeseries_group_with_group_id(self, body, office, group_id, **kwargs):  # noqa: E501
        """Patch cwmsData timeseries group with groupId  # noqa: E501

        Update existing TimeSeriesGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_timeseries_group_with_group_id(body, office, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeSeriesGroup body: (required)
        :param str office: Specifies the owning office of the time series group to be updated (required)
        :param str group_id: (required)
        :param bool replace_assigned_ts: Specifies whether to unassign all existing time series before assigning new time series specified in the content body Default: false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_cwms_data_timeseries_group_with_group_id_with_http_info(body, office, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_cwms_data_timeseries_group_with_group_id_with_http_info(body, office, group_id, **kwargs)  # noqa: E501
            return data

    def patch_cwms_data_timeseries_group_with_group_id_with_http_info(self, body, office, group_id, **kwargs):  # noqa: E501
        """Patch cwmsData timeseries group with groupId  # noqa: E501

        Update existing TimeSeriesGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_timeseries_group_with_group_id_with_http_info(body, office, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeSeriesGroup body: (required)
        :param str office: Specifies the owning office of the time series group to be updated (required)
        :param str group_id: (required)
        :param bool replace_assigned_ts: Specifies whether to unassign all existing time series before assigning new time series specified in the content body Default: false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'office', 'group_id', 'replace_assigned_ts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_cwms_data_timeseries_group_with_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_cwms_data_timeseries_group_with_group_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `patch_cwms_data_timeseries_group_with_group_id`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `patch_cwms_data_timeseries_group_with_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group-id'] = params['group_id']  # noqa: E501

        query_params = []
        if 'replace_assigned_ts' in params:
            query_params.append(('replace-assigned-ts', params['replace_assigned_ts']))  # noqa: E501
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/timeseries/group/{group-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cwms_data_timeseries_group(self, body, **kwargs):  # noqa: E501
        """Post cwmsData timeseries group  # noqa: E501

        Create new TimeSeriesGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_timeseries_group(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeSeriesGroup body: (required)
        :param bool fail_if_exists: Create will fail if provided ID already exists. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cwms_data_timeseries_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cwms_data_timeseries_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cwms_data_timeseries_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post cwmsData timeseries group  # noqa: E501

        Create new TimeSeriesGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_timeseries_group_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeSeriesGroup body: (required)
        :param bool fail_if_exists: Create will fail if provided ID already exists. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fail_if_exists']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cwms_data_timeseries_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cwms_data_timeseries_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fail_if_exists' in params:
            query_params.append(('fail-if-exists', params['fail_if_exists']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/timeseries/group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
