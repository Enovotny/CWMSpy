# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cda_client.api_client import ApiClient


class TimeSeriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_cwms_data_timeseries_with_timeseries(self, timeseries, office, begin, end, **kwargs):  # noqa: E501
        """Delete cwmsData timeseries with timeseries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_timeseries_with_timeseries(timeseries, office, begin, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str timeseries: The timeseries-id of the timeseries values to be deleted.  (required)
        :param str office: Specifies the office of the timeseries to be deleted. (required)
        :param str begin: The start of the time window to delete. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'. (required)
        :param str end: The end of the time window to delete.The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'. (required)
        :param str timezone: This field specifies a default timezone to be used if the format of the begin, end, or version-date parameters do not include offset or time zone information. Defaults to UTC.
        :param str version_date: The version date/time of the time series in the specified or default time zone. If NULL, the earliest or latest version date will be used depending on p_max_version.
        :param bool start_time_inclusive: A flag specifying whether any data at the start time should be deleted ('True') or only data <b><em>after</em></b> the start time ('False').  Default value is True
        :param bool end_time_inclusive: A flag ('True'/'False') specifying whether any data at the end time should be deleted ('True') or only data <b><em>before</em></b> the end time ('False'). Default value is False
        :param bool max_version: A flag ('True'/'False') specifying whether to use the earliest ('False') or latest ('True') version date for each time if p_version_date is NULL.  Default is 'True'
        :param bool override_protection: A flag ('True'/'False') specifying whether to delete protected data. Default is False
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cwms_data_timeseries_with_timeseries_with_http_info(timeseries, office, begin, end, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cwms_data_timeseries_with_timeseries_with_http_info(timeseries, office, begin, end, **kwargs)  # noqa: E501
            return data

    def delete_cwms_data_timeseries_with_timeseries_with_http_info(self, timeseries, office, begin, end, **kwargs):  # noqa: E501
        """Delete cwmsData timeseries with timeseries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_timeseries_with_timeseries_with_http_info(timeseries, office, begin, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str timeseries: The timeseries-id of the timeseries values to be deleted.  (required)
        :param str office: Specifies the office of the timeseries to be deleted. (required)
        :param str begin: The start of the time window to delete. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'. (required)
        :param str end: The end of the time window to delete.The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'. (required)
        :param str timezone: This field specifies a default timezone to be used if the format of the begin, end, or version-date parameters do not include offset or time zone information. Defaults to UTC.
        :param str version_date: The version date/time of the time series in the specified or default time zone. If NULL, the earliest or latest version date will be used depending on p_max_version.
        :param bool start_time_inclusive: A flag specifying whether any data at the start time should be deleted ('True') or only data <b><em>after</em></b> the start time ('False').  Default value is True
        :param bool end_time_inclusive: A flag ('True'/'False') specifying whether any data at the end time should be deleted ('True') or only data <b><em>before</em></b> the end time ('False'). Default value is False
        :param bool max_version: A flag ('True'/'False') specifying whether to use the earliest ('False') or latest ('True') version date for each time if p_version_date is NULL.  Default is 'True'
        :param bool override_protection: A flag ('True'/'False') specifying whether to delete protected data. Default is False
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timeseries', 'office', 'begin', 'end', 'timezone', 'version_date', 'start_time_inclusive', 'end_time_inclusive', 'max_version', 'override_protection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cwms_data_timeseries_with_timeseries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timeseries' is set
        if ('timeseries' not in params or
                params['timeseries'] is None):
            raise ValueError("Missing the required parameter `timeseries` when calling `delete_cwms_data_timeseries_with_timeseries`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `delete_cwms_data_timeseries_with_timeseries`")  # noqa: E501
        # verify the required parameter 'begin' is set
        if ('begin' not in params or
                params['begin'] is None):
            raise ValueError("Missing the required parameter `begin` when calling `delete_cwms_data_timeseries_with_timeseries`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `delete_cwms_data_timeseries_with_timeseries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'timeseries' in params:
            path_params['timeseries'] = params['timeseries']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'begin' in params:
            query_params.append(('begin', params['begin']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'version_date' in params:
            query_params.append(('version-date', params['version_date']))  # noqa: E501
        if 'start_time_inclusive' in params:
            query_params.append(('start-time-inclusive', params['start_time_inclusive']))  # noqa: E501
        if 'end_time_inclusive' in params:
            query_params.append(('end-time-inclusive', params['end_time_inclusive']))  # noqa: E501
        if 'max_version' in params:
            query_params.append(('max-version', params['max_version']))  # noqa: E501
        if 'override_protection' in params:
            query_params.append(('override-protection', params['override_protection']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/timeseries/{timeseries}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_timeseries(self, name, **kwargs):  # noqa: E501
        """Get cwmsData timeseries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_timeseries(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Specifies the name(s) of the time series whose data is to be included in the response. A case insensitive comparison is used to match names. (required)
        :param str office: Specifies the owning office of the time series(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   (default) Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
        :param str datum: Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum.
        :param str begin: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
        :param str end: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time. The format for this field is ISO 8601 extended, with optional timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.  Ignored if begin was specified with offset and timezone.
        :param str format: Specifies the encoding format of the response. Valid values for the format field for this URI are:  1.    tab  2.    csv  3.    xml  4.  wml2 (only if name field is specified)  5.    json (default)
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param str cursor: Deprecated. Use 'page' instead.
        :param int page_size: How many entries per page returned. Default 500.
        :param int page_size: Deprecated. Please use page-size instead.
        :return: TimeSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_timeseries_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_timeseries_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_cwms_data_timeseries_with_http_info(self, name, **kwargs):  # noqa: E501
        """Get cwmsData timeseries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_timeseries_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Specifies the name(s) of the time series whose data is to be included in the response. A case insensitive comparison is used to match names. (required)
        :param str office: Specifies the owning office of the time series(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   (default) Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
        :param str datum: Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum.
        :param str begin: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
        :param str end: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time. The format for this field is ISO 8601 extended, with optional timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.  Ignored if begin was specified with offset and timezone.
        :param str format: Specifies the encoding format of the response. Valid values for the format field for this URI are:  1.    tab  2.    csv  3.    xml  4.  wml2 (only if name field is specified)  5.    json (default)
        :param str page: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param str cursor: Deprecated. Use 'page' instead.
        :param int page_size: How many entries per page returned. Default 500.
        :param int page_size: Deprecated. Please use page-size instead.
        :return: TimeSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'office', 'unit', 'datum', 'begin', 'end', 'timezone', 'format', 'page', 'cursor', 'page_size', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_timeseries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_cwms_data_timeseries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
        if 'datum' in params:
            query_params.append(('datum', params['datum']))  # noqa: E501
        if 'begin' in params:
            query_params.append(('begin', params['begin']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2', 'application/xml;version=2', 'application/xml', ''])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/timeseries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TimeSeries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_cwms_data_timeseries_with_timeseries(self, body, timeseries, **kwargs):  # noqa: E501
        """Patch cwmsData timeseries with timeseries  # noqa: E501

        Update a TimeSeries with provided values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_timeseries_with_timeseries(body, timeseries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeSeries body: (required)
        :param str timeseries: Full CWMS Timeseries name (required)
        :param str version_date: Specifies the version date for the timeseries to create. If this field is not specified, a null version date will be used.  The format for this field is ISO 8601 extended, with optional timezone, i.e., 'format', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
        :param str timezone: Specifies the time zone of the version-date field (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.  Ignored if version-date was specified with offset and timezone.
        :param bool create_as_lrts:
        :param StoreRule store_rule: The business rule to use when merging the incoming with existing data
        :param bool override_protection: A flag to ignore the protected data quality when storing data.  \"'true' or 'false'\"
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_cwms_data_timeseries_with_timeseries_with_http_info(body, timeseries, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_cwms_data_timeseries_with_timeseries_with_http_info(body, timeseries, **kwargs)  # noqa: E501
            return data

    def patch_cwms_data_timeseries_with_timeseries_with_http_info(self, body, timeseries, **kwargs):  # noqa: E501
        """Patch cwmsData timeseries with timeseries  # noqa: E501

        Update a TimeSeries with provided values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_timeseries_with_timeseries_with_http_info(body, timeseries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeSeries body: (required)
        :param str timeseries: Full CWMS Timeseries name (required)
        :param str version_date: Specifies the version date for the timeseries to create. If this field is not specified, a null version date will be used.  The format for this field is ISO 8601 extended, with optional timezone, i.e., 'format', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
        :param str timezone: Specifies the time zone of the version-date field (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.  Ignored if version-date was specified with offset and timezone.
        :param bool create_as_lrts:
        :param StoreRule store_rule: The business rule to use when merging the incoming with existing data
        :param bool override_protection: A flag to ignore the protected data quality when storing data.  \"'true' or 'false'\"
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'timeseries', 'version_date', 'timezone', 'create_as_lrts', 'store_rule', 'override_protection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_cwms_data_timeseries_with_timeseries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_cwms_data_timeseries_with_timeseries`")  # noqa: E501
        # verify the required parameter 'timeseries' is set
        if ('timeseries' not in params or
                params['timeseries'] is None):
            raise ValueError("Missing the required parameter `timeseries` when calling `patch_cwms_data_timeseries_with_timeseries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'timeseries' in params:
            path_params['timeseries'] = params['timeseries']  # noqa: E501

        query_params = []
        if 'version_date' in params:
            query_params.append(('version-date', params['version_date']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'create_as_lrts' in params:
            query_params.append(('create-as-lrts', params['create_as_lrts']))  # noqa: E501
        if 'store_rule' in params:
            query_params.append(('store-rule', params['store_rule']))  # noqa: E501
        if 'override_protection' in params:
            query_params.append(('override-protection', params['override_protection']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/timeseries/{timeseries}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cwms_data_timeseries(self, body, **kwargs):  # noqa: E501
        """Post cwmsData timeseries  # noqa: E501

        Create new TimeSeries, will store any data provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_timeseries(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeSeries body: (required)
        :param str version_date: Specifies the version date for the timeseries to create. If this field is not specified, a null version date will be used.  The format for this field is ISO 8601 extended, with optional timezone, i.e., 'format', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
        :param str timezone: Specifies the time zone of the version-date field (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.  Ignored if version-date was specified with offset and timezone.
        :param bool create_as_lrts: Flag indicating if timeseries should be created as Local Regular Time Series. 'True' or 'False', default is 'False'
        :param StoreRule store_rule: The business rule to use when merging the incoming with existing data
        :param bool override_protection: A flag to ignore the protected data quality when storing data. 'True' or 'False'
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cwms_data_timeseries_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cwms_data_timeseries_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cwms_data_timeseries_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post cwmsData timeseries  # noqa: E501

        Create new TimeSeries, will store any data provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_timeseries_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TimeSeries body: (required)
        :param str version_date: Specifies the version date for the timeseries to create. If this field is not specified, a null version date will be used.  The format for this field is ISO 8601 extended, with optional timezone, i.e., 'format', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
        :param str timezone: Specifies the time zone of the version-date field (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.  Ignored if version-date was specified with offset and timezone.
        :param bool create_as_lrts: Flag indicating if timeseries should be created as Local Regular Time Series. 'True' or 'False', default is 'False'
        :param StoreRule store_rule: The business rule to use when merging the incoming with existing data
        :param bool override_protection: A flag to ignore the protected data quality when storing data. 'True' or 'False'
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version_date', 'timezone', 'create_as_lrts', 'store_rule', 'override_protection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cwms_data_timeseries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cwms_data_timeseries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'version_date' in params:
            query_params.append(('version-date', params['version_date']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'create_as_lrts' in params:
            query_params.append(('create-as-lrts', params['create_as_lrts']))  # noqa: E501
        if 'store_rule' in params:
            query_params.append(('store-rule', params['store_rule']))  # noqa: E501
        if 'override_protection' in params:
            query_params.append(('override-protection', params['override_protection']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/timeseries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
