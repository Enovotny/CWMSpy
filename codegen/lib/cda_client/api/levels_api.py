# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cda_client.api_client import ApiClient


class LevelsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_cwms_data_levels_with_level_id(self, level_id, **kwargs):  # noqa: E501
        """Delete cwmsData levels with levelId  # noqa: E501

        Delete CWMS Location Level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_levels_with_level_id(level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str level_id: Specifies the location level id of the Location Level to be deleted (required)
        :param bool cascade_delete:
        :param str office: Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices.
        :param str _date: Deprecated, use effective-date
        :param str effective_date: Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cwms_data_levels_with_level_id_with_http_info(level_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cwms_data_levels_with_level_id_with_http_info(level_id, **kwargs)  # noqa: E501
            return data

    def delete_cwms_data_levels_with_level_id_with_http_info(self, level_id, **kwargs):  # noqa: E501
        """Delete cwmsData levels with levelId  # noqa: E501

        Delete CWMS Location Level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_levels_with_level_id_with_http_info(level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str level_id: Specifies the location level id of the Location Level to be deleted (required)
        :param bool cascade_delete:
        :param str office: Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices.
        :param str _date: Deprecated, use effective-date
        :param str effective_date: Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['level_id', 'cascade_delete', 'office', '_date', 'effective_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cwms_data_levels_with_level_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'level_id' is set
        if ('level_id' not in params or
                params['level_id'] is None):
            raise ValueError("Missing the required parameter `level_id` when calling `delete_cwms_data_levels_with_level_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'level_id' in params:
            path_params['level-id'] = params['level_id']  # noqa: E501

        query_params = []
        if 'cascade_delete' in params:
            query_params.append(('cascade-delete', params['cascade_delete']))  # noqa: E501
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'effective_date' in params:
            query_params.append(('effective-date', params['effective_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/levels/{level-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cwms_data_specified_levels_with_specified_level_id(self, specified_level_id, office, **kwargs):  # noqa: E501
        """Delete cwmsData specifiedLevels with specifiedLevelId  # noqa: E501

        Deletes requested specified level id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_specified_levels_with_specified_level_id(specified_level_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str specified_level_id: The specified level id to be deleted (required)
        :param str office: Specifies the owning office of the timeseries identifier to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cwms_data_specified_levels_with_specified_level_id_with_http_info(specified_level_id, office, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cwms_data_specified_levels_with_specified_level_id_with_http_info(specified_level_id, office, **kwargs)  # noqa: E501
            return data

    def delete_cwms_data_specified_levels_with_specified_level_id_with_http_info(self, specified_level_id, office, **kwargs):  # noqa: E501
        """Delete cwmsData specifiedLevels with specifiedLevelId  # noqa: E501

        Deletes requested specified level id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cwms_data_specified_levels_with_specified_level_id_with_http_info(specified_level_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str specified_level_id: The specified level id to be deleted (required)
        :param str office: Specifies the owning office of the timeseries identifier to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specified_level_id', 'office']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cwms_data_specified_levels_with_specified_level_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specified_level_id' is set
        if ('specified_level_id' not in params or
                params['specified_level_id'] is None):
            raise ValueError("Missing the required parameter `specified_level_id` when calling `delete_cwms_data_specified_levels_with_specified_level_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `delete_cwms_data_specified_levels_with_specified_level_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'specified_level_id' in params:
            path_params['specified-level-id'] = params['specified_level_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/specified-levels/{specified-level-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_levels(self, **kwargs):  # noqa: E501
        """Get cwmsData levels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_levels(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Deprecated, use level-id-mask. 
        :param str level_id_mask: Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all.
        :param str office: Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
        :param str datum: Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum.
        :param str begin: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
        :param str end: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
        :param str format: Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version=2 must not include this field. Valid format field values for this URI are:  1.    tab  2.    csv  3.    xml  4.    wml2 (only if name field is specified)  5.    json (default)  
        :param str page: This identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param int page_size: How many entries per page returned. Default 100.
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_levels_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_levels_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cwms_data_levels_with_http_info(self, **kwargs):  # noqa: E501
        """Get cwmsData levels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_levels_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Deprecated, use level-id-mask. 
        :param str level_id_mask: Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all.
        :param str office: Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
        :param str datum: Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum.
        :param str begin: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
        :param str end: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
        :param str timezone: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
        :param str format: Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version=2 must not include this field. Valid format field values for this URI are:  1.    tab  2.    csv  3.    xml  4.    wml2 (only if name field is specified)  5.    json (default)  
        :param str page: This identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
        :param int page_size: How many entries per page returned. Default 100.
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'level_id_mask', 'office', 'unit', 'datum', 'begin', 'end', 'timezone', 'format', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_levels" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'level_id_mask' in params:
            query_params.append(('level-id-mask', params['level_id_mask']))  # noqa: E501
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
        if 'datum' in params:
            query_params.append(('datum', params['datum']))  # noqa: E501
        if 'begin' in params:
            query_params.append(('begin', params['begin']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page-size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/levels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Unit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_levels_with_level_id(self, level_id, office, effective_date, **kwargs):  # noqa: E501
        """Get cwmsData levels with levelId  # noqa: E501

        Retrieves requested Location Level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_levels_with_level_id(level_id, office, effective_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str level_id: Specifies the requested location level. (required)
        :param str office: Specifies the office of the Location Level to be returned (required)
        :param str effective_date: Specifies the effective date of Location Level to be returned (required)
        :param str _date: Deprecated, use effective-date
        :param str unit: Desired unit for the values retrieved.
        :return: LocationLevel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_levels_with_level_id_with_http_info(level_id, office, effective_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_levels_with_level_id_with_http_info(level_id, office, effective_date, **kwargs)  # noqa: E501
            return data

    def get_cwms_data_levels_with_level_id_with_http_info(self, level_id, office, effective_date, **kwargs):  # noqa: E501
        """Get cwmsData levels with levelId  # noqa: E501

        Retrieves requested Location Level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_levels_with_level_id_with_http_info(level_id, office, effective_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str level_id: Specifies the requested location level. (required)
        :param str office: Specifies the office of the Location Level to be returned (required)
        :param str effective_date: Specifies the effective date of Location Level to be returned (required)
        :param str _date: Deprecated, use effective-date
        :param str unit: Desired unit for the values retrieved.
        :return: LocationLevel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['level_id', 'office', 'effective_date', '_date', 'unit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_levels_with_level_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'level_id' is set
        if ('level_id' not in params or
                params['level_id'] is None):
            raise ValueError("Missing the required parameter `level_id` when calling `get_cwms_data_levels_with_level_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `get_cwms_data_levels_with_level_id`")  # noqa: E501
        # verify the required parameter 'effective_date' is set
        if ('effective_date' not in params or
                params['effective_date'] is None):
            raise ValueError("Missing the required parameter `effective_date` when calling `get_cwms_data_levels_with_level_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'level_id' in params:
            path_params['level-id'] = params['level_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'effective_date' in params:
            query_params.append(('effective-date', params['effective_date']))  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/levels/{level-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationLevel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_specified_levels(self, **kwargs):  # noqa: E501
        """Get cwmsData specifiedLevels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_specified_levels(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the Specified Levels whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str template_id_mask: Mask that specifies the IDs to be included in the response. If this field is not specified, all specified levels shall be returned.
        :return: SpecifiedLevel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_specified_levels_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_specified_levels_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cwms_data_specified_levels_with_http_info(self, **kwargs):  # noqa: E501
        """Get cwmsData specifiedLevels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_specified_levels_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the Specified Levels whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
        :param str template_id_mask: Mask that specifies the IDs to be included in the response. If this field is not specified, all specified levels shall be returned.
        :return: SpecifiedLevel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office', 'template_id_mask']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_specified_levels" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'template_id_mask' in params:
            query_params.append(('template-id-mask', params['template_id_mask']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/specified-levels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpecifiedLevel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_cwms_data_levels_with_level_id(self, body, level_id, **kwargs):  # noqa: E501
        """Patch cwmsData levels with levelId  # noqa: E501

        Update CWMS Location Level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_levels_with_level_id(body, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LocationLevel body: (required)
        :param str level_id: Specifies the location level id of the Location Level to be updated (required)
        :param str _date: Deprecated, use effective-date
        :param str effective_date: Specifies the effective date of Location Level that will be updated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_cwms_data_levels_with_level_id_with_http_info(body, level_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_cwms_data_levels_with_level_id_with_http_info(body, level_id, **kwargs)  # noqa: E501
            return data

    def patch_cwms_data_levels_with_level_id_with_http_info(self, body, level_id, **kwargs):  # noqa: E501
        """Patch cwmsData levels with levelId  # noqa: E501

        Update CWMS Location Level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_levels_with_level_id_with_http_info(body, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LocationLevel body: (required)
        :param str level_id: Specifies the location level id of the Location Level to be updated (required)
        :param str _date: Deprecated, use effective-date
        :param str effective_date: Specifies the effective date of Location Level that will be updated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'level_id', '_date', 'effective_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_cwms_data_levels_with_level_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_cwms_data_levels_with_level_id`")  # noqa: E501
        # verify the required parameter 'level_id' is set
        if ('level_id' not in params or
                params['level_id'] is None):
            raise ValueError("Missing the required parameter `level_id` when calling `patch_cwms_data_levels_with_level_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'level_id' in params:
            path_params['level-id'] = params['level_id']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'effective_date' in params:
            query_params.append(('effective-date', params['effective_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/levels/{level-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_cwms_data_specified_levels_with_specified_level_id(self, specified_level_id, specified_level_id, office, **kwargs):  # noqa: E501
        """Patch cwmsData specifiedLevels with specifiedLevelId  # noqa: E501

        Renames the requested specified level id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_specified_levels_with_specified_level_id(specified_level_id, specified_level_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str specified_level_id: (required)
        :param str specified_level_id: The new specified level id. (required)
        :param str office: Specifies the owning office of the specified level to be renamed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_cwms_data_specified_levels_with_specified_level_id_with_http_info(specified_level_id, specified_level_id, office, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_cwms_data_specified_levels_with_specified_level_id_with_http_info(specified_level_id, specified_level_id, office, **kwargs)  # noqa: E501
            return data

    def patch_cwms_data_specified_levels_with_specified_level_id_with_http_info(self, specified_level_id, specified_level_id, office, **kwargs):  # noqa: E501
        """Patch cwmsData specifiedLevels with specifiedLevelId  # noqa: E501

        Renames the requested specified level id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_cwms_data_specified_levels_with_specified_level_id_with_http_info(specified_level_id, specified_level_id, office, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str specified_level_id: (required)
        :param str specified_level_id: The new specified level id. (required)
        :param str office: Specifies the owning office of the specified level to be renamed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specified_level_id', 'specified_level_id', 'office']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_cwms_data_specified_levels_with_specified_level_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specified_level_id' is set
        if ('specified_level_id' not in params or
                params['specified_level_id'] is None):
            raise ValueError("Missing the required parameter `specified_level_id` when calling `patch_cwms_data_specified_levels_with_specified_level_id`")  # noqa: E501
        # verify the required parameter 'specified_level_id' is set
        if ('specified_level_id' not in params or
                params['specified_level_id'] is None):
            raise ValueError("Missing the required parameter `specified_level_id` when calling `patch_cwms_data_specified_levels_with_specified_level_id`")  # noqa: E501
        # verify the required parameter 'office' is set
        if ('office' not in params or
                params['office'] is None):
            raise ValueError("Missing the required parameter `office` when calling `patch_cwms_data_specified_levels_with_specified_level_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'specified_level_id' in params:
            path_params['specified-level-id'] = params['specified_level_id']  # noqa: E501

        query_params = []
        if 'specified_level_id' in params:
            query_params.append(('specified-level-id', params['specified_level_id']))  # noqa: E501
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/specified-levels/{specified-level-id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cwms_data_levels(self, body, **kwargs):  # noqa: E501
        """Post cwmsData levels  # noqa: E501

        Create new CWMS Location Level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_levels(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LocationLevel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cwms_data_levels_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cwms_data_levels_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cwms_data_levels_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post cwmsData levels  # noqa: E501

        Create new CWMS Location Level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_levels_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LocationLevel body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cwms_data_levels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cwms_data_levels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/levels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cwms_data_specified_levels(self, body, **kwargs):  # noqa: E501
        """Post cwmsData specifiedLevels  # noqa: E501

        Create new SpecifiedLevel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_specified_levels(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpecifiedLevel body: (required)
        :param bool fail_if_exists: Create will fail if provided ID already exists. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cwms_data_specified_levels_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cwms_data_specified_levels_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cwms_data_specified_levels_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post cwmsData specifiedLevels  # noqa: E501

        Create new SpecifiedLevel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cwms_data_specified_levels_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpecifiedLevel body: (required)
        :param bool fail_if_exists: Create will fail if provided ID already exists. Default: true
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fail_if_exists']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cwms_data_specified_levels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cwms_data_specified_levels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fail_if_exists' in params:
            query_params.append(('fail-if-exists', params['fail_if_exists']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;version=2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'CwmsAAACacAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/specified-levels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
