# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cda_client.api_client import ApiClient


class BasinsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_cwms_data_basins(self, **kwargs):  # noqa: E501
        """Get cwmsData basins  # noqa: E501

        Returns CWMS Basin Data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_basins(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the basin whose data is to be included in the response. If this field is not specified, matching basin information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system. Basin values will be in the default English units for their parameters. (This is default if no value is entered)  2. SI.   Specifies the SI unit system. Basin values will be in the default SI units for their parameters.
        :return: Basin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_basins_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_basins_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cwms_data_basins_with_http_info(self, **kwargs):  # noqa: E501
        """Get cwmsData basins  # noqa: E501

        Returns CWMS Basin Data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_basins_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str office: Specifies the owning office of the basin whose data is to be included in the response. If this field is not specified, matching basin information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system. Basin values will be in the default English units for their parameters. (This is default if no value is entered)  2. SI.   Specifies the SI unit system. Basin values will be in the default SI units for their parameters.
        :return: Basin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['office', 'unit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_basins" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.named+pg+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/basins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Basin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cwms_data_basins_with_basin_id(self, basin_id, **kwargs):  # noqa: E501
        """Get cwmsData basins with basinId  # noqa: E501

        Returns CWMS Basin Data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_basins_with_basin_id(basin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str basin_id: (required)
        :param str office: Specifies the owning office of the basin whose data is to be included in the response. If this field is not specified, matching basin information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system. Basin values will be in the default English units for their parameters. (This is default if no value is entered)  2. SI.   Specifies the SI unit system. Basin values will be in the default SI units for their parameters.
        :return: Basin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cwms_data_basins_with_basin_id_with_http_info(basin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cwms_data_basins_with_basin_id_with_http_info(basin_id, **kwargs)  # noqa: E501
            return data

    def get_cwms_data_basins_with_basin_id_with_http_info(self, basin_id, **kwargs):  # noqa: E501
        """Get cwmsData basins with basinId  # noqa: E501

        Returns CWMS Basin Data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cwms_data_basins_with_basin_id_with_http_info(basin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str basin_id: (required)
        :param str office: Specifies the owning office of the basin whose data is to be included in the response. If this field is not specified, matching basin information from all offices shall be returned.
        :param str unit: Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system. Basin values will be in the default English units for their parameters. (This is default if no value is entered)  2. SI.   Specifies the SI unit system. Basin values will be in the default SI units for their parameters.
        :return: Basin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['basin_id', 'office', 'unit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cwms_data_basins_with_basin_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'basin_id' is set
        if ('basin_id' not in params or
                params['basin_id'] is None):
            raise ValueError("Missing the required parameter `basin_id` when calling `get_cwms_data_basins_with_basin_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'basin_id' in params:
            path_params['basin-id'] = params['basin_id']  # noqa: E501

        query_params = []
        if 'office' in params:
            query_params.append(('office', params['office']))  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.named+pg+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cwms-data/basins/{basin-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Basin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
