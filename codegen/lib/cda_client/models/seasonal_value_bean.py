# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SeasonalValueBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'float',
        'offset_months': 'int',
        'offset_minutes': 'int'
    }

    attribute_map = {
        'value': 'value',
        'offset_months': 'offset-months',
        'offset_minutes': 'offset-minutes'
    }

    def __init__(self, value=None, offset_months=None, offset_minutes=None):  # noqa: E501
        """SeasonalValueBean - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._offset_months = None
        self._offset_minutes = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if offset_months is not None:
            self.offset_months = offset_months
        if offset_minutes is not None:
            self.offset_minutes = offset_minutes

    @property
    def value(self):
        """Gets the value of this SeasonalValueBean.  # noqa: E501


        :return: The value of this SeasonalValueBean.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SeasonalValueBean.


        :param value: The value of this SeasonalValueBean.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def offset_months(self):
        """Gets the offset_months of this SeasonalValueBean.  # noqa: E501


        :return: The offset_months of this SeasonalValueBean.  # noqa: E501
        :rtype: int
        """
        return self._offset_months

    @offset_months.setter
    def offset_months(self, offset_months):
        """Sets the offset_months of this SeasonalValueBean.


        :param offset_months: The offset_months of this SeasonalValueBean.  # noqa: E501
        :type: int
        """

        self._offset_months = offset_months

    @property
    def offset_minutes(self):
        """Gets the offset_minutes of this SeasonalValueBean.  # noqa: E501


        :return: The offset_minutes of this SeasonalValueBean.  # noqa: E501
        :rtype: int
        """
        return self._offset_minutes

    @offset_minutes.setter
    def offset_minutes(self, offset_minutes):
        """Sets the offset_minutes of this SeasonalValueBean.


        :param offset_minutes: The offset_minutes of this SeasonalValueBean.  # noqa: E501
        :type: int
        """

        self._offset_minutes = offset_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SeasonalValueBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeasonalValueBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
