# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationLevel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'location_level_id': 'str',
        'seasonal_time_series_id': 'str',
        'seasonal_values': 'list[SeasonalValueBean]',
        'specified_level_id': 'str',
        'parameter_type_id': 'str',
        'parameter_id': 'str',
        'constant_value': 'float',
        'level_units_id': 'str',
        'level_date': 'datetime',
        'level_comment': 'str',
        'interval_origin': 'datetime',
        'interval_months': 'int',
        'interval_minutes': 'int',
        'interpolate_string': 'str',
        'duration_id': 'str',
        'attribute_value': 'float',
        'attribute_units_id': 'str',
        'attribute_parameter_type_id': 'str',
        'attribute_parameter_id': 'str',
        'attribute_duration_id': 'str',
        'attribute_comment': 'str'
    }

    attribute_map = {
        'office_id': 'office-id',
        'location_level_id': 'location-level-id',
        'seasonal_time_series_id': 'seasonal-time-series-id',
        'seasonal_values': 'seasonal-values',
        'specified_level_id': 'specified-level-id',
        'parameter_type_id': 'parameter-type-id',
        'parameter_id': 'parameter-id',
        'constant_value': 'constant-value',
        'level_units_id': 'level-units-id',
        'level_date': 'level-date',
        'level_comment': 'level-comment',
        'interval_origin': 'interval-origin',
        'interval_months': 'interval-months',
        'interval_minutes': 'interval-minutes',
        'interpolate_string': 'interpolate-string',
        'duration_id': 'duration-id',
        'attribute_value': 'attribute-value',
        'attribute_units_id': 'attribute-units-id',
        'attribute_parameter_type_id': 'attribute-parameter-type-id',
        'attribute_parameter_id': 'attribute-parameter-id',
        'attribute_duration_id': 'attribute-duration-id',
        'attribute_comment': 'attribute-comment'
    }

    def __init__(self, office_id=None, location_level_id=None, seasonal_time_series_id=None, seasonal_values=None, specified_level_id=None, parameter_type_id=None, parameter_id=None, constant_value=None, level_units_id=None, level_date=None, level_comment=None, interval_origin=None, interval_months=None, interval_minutes=None, interpolate_string=None, duration_id=None, attribute_value=None, attribute_units_id=None, attribute_parameter_type_id=None, attribute_parameter_id=None, attribute_duration_id=None, attribute_comment=None):  # noqa: E501
        """LocationLevel - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._location_level_id = None
        self._seasonal_time_series_id = None
        self._seasonal_values = None
        self._specified_level_id = None
        self._parameter_type_id = None
        self._parameter_id = None
        self._constant_value = None
        self._level_units_id = None
        self._level_date = None
        self._level_comment = None
        self._interval_origin = None
        self._interval_months = None
        self._interval_minutes = None
        self._interpolate_string = None
        self._duration_id = None
        self._attribute_value = None
        self._attribute_units_id = None
        self._attribute_parameter_type_id = None
        self._attribute_parameter_id = None
        self._attribute_duration_id = None
        self._attribute_comment = None
        self.discriminator = None
        self.office_id = office_id
        self.location_level_id = location_level_id
        if seasonal_time_series_id is not None:
            self.seasonal_time_series_id = seasonal_time_series_id
        if seasonal_values is not None:
            self.seasonal_values = seasonal_values
        if specified_level_id is not None:
            self.specified_level_id = specified_level_id
        if parameter_type_id is not None:
            self.parameter_type_id = parameter_type_id
        if parameter_id is not None:
            self.parameter_id = parameter_id
        if constant_value is not None:
            self.constant_value = constant_value
        if level_units_id is not None:
            self.level_units_id = level_units_id
        if level_date is not None:
            self.level_date = level_date
        if level_comment is not None:
            self.level_comment = level_comment
        if interval_origin is not None:
            self.interval_origin = interval_origin
        if interval_months is not None:
            self.interval_months = interval_months
        if interval_minutes is not None:
            self.interval_minutes = interval_minutes
        if interpolate_string is not None:
            self.interpolate_string = interpolate_string
        if duration_id is not None:
            self.duration_id = duration_id
        if attribute_value is not None:
            self.attribute_value = attribute_value
        if attribute_units_id is not None:
            self.attribute_units_id = attribute_units_id
        if attribute_parameter_type_id is not None:
            self.attribute_parameter_type_id = attribute_parameter_type_id
        if attribute_parameter_id is not None:
            self.attribute_parameter_id = attribute_parameter_id
        if attribute_duration_id is not None:
            self.attribute_duration_id = attribute_duration_id
        if attribute_comment is not None:
            self.attribute_comment = attribute_comment

    @property
    def office_id(self):
        """Gets the office_id of this LocationLevel.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this LocationLevel.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this LocationLevel.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def location_level_id(self):
        """Gets the location_level_id of this LocationLevel.  # noqa: E501

        Name of the location level  # noqa: E501

        :return: The location_level_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._location_level_id

    @location_level_id.setter
    def location_level_id(self, location_level_id):
        """Sets the location_level_id of this LocationLevel.

        Name of the location level  # noqa: E501

        :param location_level_id: The location_level_id of this LocationLevel.  # noqa: E501
        :type: str
        """
        if location_level_id is None:
            raise ValueError("Invalid value for `location_level_id`, must not be `None`")  # noqa: E501

        self._location_level_id = location_level_id

    @property
    def seasonal_time_series_id(self):
        """Gets the seasonal_time_series_id of this LocationLevel.  # noqa: E501

        Timeseries ID (e.g. from the times series catalog) to use as the location level. Mutually exclusive with seasonalValues and siParameterUnitsConstantValue  # noqa: E501

        :return: The seasonal_time_series_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._seasonal_time_series_id

    @seasonal_time_series_id.setter
    def seasonal_time_series_id(self, seasonal_time_series_id):
        """Sets the seasonal_time_series_id of this LocationLevel.

        Timeseries ID (e.g. from the times series catalog) to use as the location level. Mutually exclusive with seasonalValues and siParameterUnitsConstantValue  # noqa: E501

        :param seasonal_time_series_id: The seasonal_time_series_id of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._seasonal_time_series_id = seasonal_time_series_id

    @property
    def seasonal_values(self):
        """Gets the seasonal_values of this LocationLevel.  # noqa: E501

        List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue  # noqa: E501

        :return: The seasonal_values of this LocationLevel.  # noqa: E501
        :rtype: list[SeasonalValueBean]
        """
        return self._seasonal_values

    @seasonal_values.setter
    def seasonal_values(self, seasonal_values):
        """Sets the seasonal_values of this LocationLevel.

        List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue  # noqa: E501

        :param seasonal_values: The seasonal_values of this LocationLevel.  # noqa: E501
        :type: list[SeasonalValueBean]
        """

        self._seasonal_values = seasonal_values

    @property
    def specified_level_id(self):
        """Gets the specified_level_id of this LocationLevel.  # noqa: E501

        Generic name of this location level. Common names are 'Top of Dam', 'Streambed', 'Bottom of Dam'.  # noqa: E501

        :return: The specified_level_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._specified_level_id

    @specified_level_id.setter
    def specified_level_id(self, specified_level_id):
        """Sets the specified_level_id of this LocationLevel.

        Generic name of this location level. Common names are 'Top of Dam', 'Streambed', 'Bottom of Dam'.  # noqa: E501

        :param specified_level_id: The specified_level_id of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._specified_level_id = specified_level_id

    @property
    def parameter_type_id(self):
        """Gets the parameter_type_id of this LocationLevel.  # noqa: E501

        To indicate if single or aggregate value  # noqa: E501

        :return: The parameter_type_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._parameter_type_id

    @parameter_type_id.setter
    def parameter_type_id(self, parameter_type_id):
        """Sets the parameter_type_id of this LocationLevel.

        To indicate if single or aggregate value  # noqa: E501

        :param parameter_type_id: The parameter_type_id of this LocationLevel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Inst", "Ave", "Min", "Max", "Total"]  # noqa: E501
        if parameter_type_id not in allowed_values:
            raise ValueError(
                "Invalid value for `parameter_type_id` ({0}), must be one of {1}"  # noqa: E501
                .format(parameter_type_id, allowed_values)
            )

        self._parameter_type_id = parameter_type_id

    @property
    def parameter_id(self):
        """Gets the parameter_id of this LocationLevel.  # noqa: E501

        Data Type such as Stage, Elevation, or others.  # noqa: E501

        :return: The parameter_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this LocationLevel.

        Data Type such as Stage, Elevation, or others.  # noqa: E501

        :param parameter_id: The parameter_id of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._parameter_id = parameter_id

    @property
    def constant_value(self):
        """Gets the constant_value of this LocationLevel.  # noqa: E501

        Single value for this location level. Mutually exclusive with seasonableTimeSeriesId and seasonValues.  # noqa: E501

        :return: The constant_value of this LocationLevel.  # noqa: E501
        :rtype: float
        """
        return self._constant_value

    @constant_value.setter
    def constant_value(self, constant_value):
        """Sets the constant_value of this LocationLevel.

        Single value for this location level. Mutually exclusive with seasonableTimeSeriesId and seasonValues.  # noqa: E501

        :param constant_value: The constant_value of this LocationLevel.  # noqa: E501
        :type: float
        """

        self._constant_value = constant_value

    @property
    def level_units_id(self):
        """Gets the level_units_id of this LocationLevel.  # noqa: E501

        Units the provided levels are in  # noqa: E501

        :return: The level_units_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._level_units_id

    @level_units_id.setter
    def level_units_id(self, level_units_id):
        """Sets the level_units_id of this LocationLevel.

        Units the provided levels are in  # noqa: E501

        :param level_units_id: The level_units_id of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._level_units_id = level_units_id

    @property
    def level_date(self):
        """Gets the level_date of this LocationLevel.  # noqa: E501

        The date/time at which this location level configuration takes effect.  # noqa: E501

        :return: The level_date of this LocationLevel.  # noqa: E501
        :rtype: datetime
        """
        return self._level_date

    @level_date.setter
    def level_date(self, level_date):
        """Sets the level_date of this LocationLevel.

        The date/time at which this location level configuration takes effect.  # noqa: E501

        :param level_date: The level_date of this LocationLevel.  # noqa: E501
        :type: datetime
        """

        self._level_date = level_date

    @property
    def level_comment(self):
        """Gets the level_comment of this LocationLevel.  # noqa: E501


        :return: The level_comment of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._level_comment

    @level_comment.setter
    def level_comment(self, level_comment):
        """Sets the level_comment of this LocationLevel.


        :param level_comment: The level_comment of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._level_comment = level_comment

    @property
    def interval_origin(self):
        """Gets the interval_origin of this LocationLevel.  # noqa: E501

        The start point of provided seasonal values  # noqa: E501

        :return: The interval_origin of this LocationLevel.  # noqa: E501
        :rtype: datetime
        """
        return self._interval_origin

    @interval_origin.setter
    def interval_origin(self, interval_origin):
        """Sets the interval_origin of this LocationLevel.

        The start point of provided seasonal values  # noqa: E501

        :param interval_origin: The interval_origin of this LocationLevel.  # noqa: E501
        :type: datetime
        """

        self._interval_origin = interval_origin

    @property
    def interval_months(self):
        """Gets the interval_months of this LocationLevel.  # noqa: E501


        :return: The interval_months of this LocationLevel.  # noqa: E501
        :rtype: int
        """
        return self._interval_months

    @interval_months.setter
    def interval_months(self, interval_months):
        """Sets the interval_months of this LocationLevel.


        :param interval_months: The interval_months of this LocationLevel.  # noqa: E501
        :type: int
        """

        self._interval_months = interval_months

    @property
    def interval_minutes(self):
        """Gets the interval_minutes of this LocationLevel.  # noqa: E501


        :return: The interval_minutes of this LocationLevel.  # noqa: E501
        :rtype: int
        """
        return self._interval_minutes

    @interval_minutes.setter
    def interval_minutes(self, interval_minutes):
        """Sets the interval_minutes of this LocationLevel.


        :param interval_minutes: The interval_minutes of this LocationLevel.  # noqa: E501
        :type: int
        """

        self._interval_minutes = interval_minutes

    @property
    def interpolate_string(self):
        """Gets the interpolate_string of this LocationLevel.  # noqa: E501

        Indicating whether or not to interpolate between seasonal values.  # noqa: E501

        :return: The interpolate_string of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._interpolate_string

    @interpolate_string.setter
    def interpolate_string(self, interpolate_string):
        """Sets the interpolate_string of this LocationLevel.

        Indicating whether or not to interpolate between seasonal values.  # noqa: E501

        :param interpolate_string: The interpolate_string of this LocationLevel.  # noqa: E501
        :type: str
        """
        allowed_values = ["T", "F"]  # noqa: E501
        if interpolate_string not in allowed_values:
            raise ValueError(
                "Invalid value for `interpolate_string` ({0}), must be one of {1}"  # noqa: E501
                .format(interpolate_string, allowed_values)
            )

        self._interpolate_string = interpolate_string

    @property
    def duration_id(self):
        """Gets the duration_id of this LocationLevel.  # noqa: E501

        0 if parameterTypeId is Inst. Otherwise duration indicating the time window of the aggregate value.  # noqa: E501

        :return: The duration_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._duration_id

    @duration_id.setter
    def duration_id(self, duration_id):
        """Sets the duration_id of this LocationLevel.

        0 if parameterTypeId is Inst. Otherwise duration indicating the time window of the aggregate value.  # noqa: E501

        :param duration_id: The duration_id of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._duration_id = duration_id

    @property
    def attribute_value(self):
        """Gets the attribute_value of this LocationLevel.  # noqa: E501


        :return: The attribute_value of this LocationLevel.  # noqa: E501
        :rtype: float
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value):
        """Sets the attribute_value of this LocationLevel.


        :param attribute_value: The attribute_value of this LocationLevel.  # noqa: E501
        :type: float
        """

        self._attribute_value = attribute_value

    @property
    def attribute_units_id(self):
        """Gets the attribute_units_id of this LocationLevel.  # noqa: E501


        :return: The attribute_units_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._attribute_units_id

    @attribute_units_id.setter
    def attribute_units_id(self, attribute_units_id):
        """Sets the attribute_units_id of this LocationLevel.


        :param attribute_units_id: The attribute_units_id of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._attribute_units_id = attribute_units_id

    @property
    def attribute_parameter_type_id(self):
        """Gets the attribute_parameter_type_id of this LocationLevel.  # noqa: E501


        :return: The attribute_parameter_type_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._attribute_parameter_type_id

    @attribute_parameter_type_id.setter
    def attribute_parameter_type_id(self, attribute_parameter_type_id):
        """Sets the attribute_parameter_type_id of this LocationLevel.


        :param attribute_parameter_type_id: The attribute_parameter_type_id of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._attribute_parameter_type_id = attribute_parameter_type_id

    @property
    def attribute_parameter_id(self):
        """Gets the attribute_parameter_id of this LocationLevel.  # noqa: E501


        :return: The attribute_parameter_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._attribute_parameter_id

    @attribute_parameter_id.setter
    def attribute_parameter_id(self, attribute_parameter_id):
        """Sets the attribute_parameter_id of this LocationLevel.


        :param attribute_parameter_id: The attribute_parameter_id of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._attribute_parameter_id = attribute_parameter_id

    @property
    def attribute_duration_id(self):
        """Gets the attribute_duration_id of this LocationLevel.  # noqa: E501


        :return: The attribute_duration_id of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._attribute_duration_id

    @attribute_duration_id.setter
    def attribute_duration_id(self, attribute_duration_id):
        """Sets the attribute_duration_id of this LocationLevel.


        :param attribute_duration_id: The attribute_duration_id of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._attribute_duration_id = attribute_duration_id

    @property
    def attribute_comment(self):
        """Gets the attribute_comment of this LocationLevel.  # noqa: E501


        :return: The attribute_comment of this LocationLevel.  # noqa: E501
        :rtype: str
        """
        return self._attribute_comment

    @attribute_comment.setter
    def attribute_comment(self, attribute_comment):
        """Sets the attribute_comment of this LocationLevel.


        :param attribute_comment: The attribute_comment of this LocationLevel.  # noqa: E501
        :type: str
        """

        self._attribute_comment = attribute_comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationLevel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
