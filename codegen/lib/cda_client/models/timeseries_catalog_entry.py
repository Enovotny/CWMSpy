# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeseriesCatalogEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office': 'str',
        'name': 'str',
        'units': 'str',
        'interval': 'str',
        'interval_offset': 'int',
        'time_zone': 'str',
        'extents': 'list[TimeSeriesExtents]'
    }

    attribute_map = {
        'office': 'office',
        'name': 'name',
        'units': 'units',
        'interval': 'interval',
        'interval_offset': 'intervalOffset',
        'time_zone': 'timeZone',
        'extents': 'extents'
    }

    def __init__(self, office=None, name=None, units=None, interval=None, interval_offset=None, time_zone=None, extents=None):  # noqa: E501
        """TimeseriesCatalogEntry - a model defined in Swagger"""  # noqa: E501
        self._office = None
        self._name = None
        self._units = None
        self._interval = None
        self._interval_offset = None
        self._time_zone = None
        self._extents = None
        self.discriminator = None
        if office is not None:
            self.office = office
        if name is not None:
            self.name = name
        if units is not None:
            self.units = units
        if interval is not None:
            self.interval = interval
        if interval_offset is not None:
            self.interval_offset = interval_offset
        if time_zone is not None:
            self.time_zone = time_zone
        if extents is not None:
            self.extents = extents

    @property
    def office(self):
        """Gets the office of this TimeseriesCatalogEntry.  # noqa: E501


        :return: The office of this TimeseriesCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this TimeseriesCatalogEntry.


        :param office: The office of this TimeseriesCatalogEntry.  # noqa: E501
        :type: str
        """

        self._office = office

    @property
    def name(self):
        """Gets the name of this TimeseriesCatalogEntry.  # noqa: E501


        :return: The name of this TimeseriesCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimeseriesCatalogEntry.


        :param name: The name of this TimeseriesCatalogEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def units(self):
        """Gets the units of this TimeseriesCatalogEntry.  # noqa: E501


        :return: The units of this TimeseriesCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this TimeseriesCatalogEntry.


        :param units: The units of this TimeseriesCatalogEntry.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def interval(self):
        """Gets the interval of this TimeseriesCatalogEntry.  # noqa: E501


        :return: The interval of this TimeseriesCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this TimeseriesCatalogEntry.


        :param interval: The interval of this TimeseriesCatalogEntry.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def interval_offset(self):
        """Gets the interval_offset of this TimeseriesCatalogEntry.  # noqa: E501

        Offset from top of interval  # noqa: E501

        :return: The interval_offset of this TimeseriesCatalogEntry.  # noqa: E501
        :rtype: int
        """
        return self._interval_offset

    @interval_offset.setter
    def interval_offset(self, interval_offset):
        """Sets the interval_offset of this TimeseriesCatalogEntry.

        Offset from top of interval  # noqa: E501

        :param interval_offset: The interval_offset of this TimeseriesCatalogEntry.  # noqa: E501
        :type: int
        """

        self._interval_offset = interval_offset

    @property
    def time_zone(self):
        """Gets the time_zone of this TimeseriesCatalogEntry.  # noqa: E501

        Only on 21.1.1 Database. The timezone the Interval Offset is from.  # noqa: E501

        :return: The time_zone of this TimeseriesCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this TimeseriesCatalogEntry.

        Only on 21.1.1 Database. The timezone the Interval Offset is from.  # noqa: E501

        :param time_zone: The time_zone of this TimeseriesCatalogEntry.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def extents(self):
        """Gets the extents of this TimeseriesCatalogEntry.  # noqa: E501


        :return: The extents of this TimeseriesCatalogEntry.  # noqa: E501
        :rtype: list[TimeSeriesExtents]
        """
        return self._extents

    @extents.setter
    def extents(self, extents):
        """Sets the extents of this TimeseriesCatalogEntry.


        :param extents: The extents of this TimeseriesCatalogEntry.  # noqa: E501
        :type: list[TimeSeriesExtents]
        """

        self._extents = extents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeseriesCatalogEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeseriesCatalogEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
