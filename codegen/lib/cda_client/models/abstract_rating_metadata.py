# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbstractRatingMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'rating_spec_id': 'str',
        'units_id': 'str',
        'active': 'bool',
        'effective_date': 'datetime',
        'create_date': 'datetime',
        'transition_date': 'datetime',
        'description': 'str',
        'vertical_datum_info': 'VerticalDatumInfo',
        'rating_type': 'str'
    }

    attribute_map = {
        'office_id': 'office-id',
        'rating_spec_id': 'rating-spec-id',
        'units_id': 'units-id',
        'active': 'active',
        'effective_date': 'effective-date',
        'create_date': 'create-date',
        'transition_date': 'transition-date',
        'description': 'description',
        'vertical_datum_info': 'vertical-datum-info',
        'rating_type': 'rating-type'
    }

    discriminator_value_class_map = {
            'table'.lower(): '#/components/schemas/TableRating',
            'transitional'.lower(): '#/components/schemas/TransitionalRating',
            'virtual'.lower(): '#/components/schemas/VirtualRating',
            'expression-rating'.lower(): '#/components/schemas/ExpressionRating',
            'usgs'.lower(): '#/components/schemas/UsgsStreamRating',
    }

    def __init__(self, office_id=None, rating_spec_id=None, units_id=None, active=None, effective_date=None, create_date=None, transition_date=None, description=None, vertical_datum_info=None, rating_type=None):  # noqa: E501
        """AbstractRatingMetadata - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._rating_spec_id = None
        self._units_id = None
        self._active = None
        self._effective_date = None
        self._create_date = None
        self._transition_date = None
        self._description = None
        self._vertical_datum_info = None
        self._rating_type = None
        self.discriminator = 'rating_type'
        if office_id is not None:
            self.office_id = office_id
        if rating_spec_id is not None:
            self.rating_spec_id = rating_spec_id
        if units_id is not None:
            self.units_id = units_id
        if active is not None:
            self.active = active
        if effective_date is not None:
            self.effective_date = effective_date
        if create_date is not None:
            self.create_date = create_date
        if transition_date is not None:
            self.transition_date = transition_date
        if description is not None:
            self.description = description
        if vertical_datum_info is not None:
            self.vertical_datum_info = vertical_datum_info
        if rating_type is not None:
            self.rating_type = rating_type

    @property
    def office_id(self):
        """Gets the office_id of this AbstractRatingMetadata.  # noqa: E501


        :return: The office_id of this AbstractRatingMetadata.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this AbstractRatingMetadata.


        :param office_id: The office_id of this AbstractRatingMetadata.  # noqa: E501
        :type: str
        """

        self._office_id = office_id

    @property
    def rating_spec_id(self):
        """Gets the rating_spec_id of this AbstractRatingMetadata.  # noqa: E501


        :return: The rating_spec_id of this AbstractRatingMetadata.  # noqa: E501
        :rtype: str
        """
        return self._rating_spec_id

    @rating_spec_id.setter
    def rating_spec_id(self, rating_spec_id):
        """Sets the rating_spec_id of this AbstractRatingMetadata.


        :param rating_spec_id: The rating_spec_id of this AbstractRatingMetadata.  # noqa: E501
        :type: str
        """

        self._rating_spec_id = rating_spec_id

    @property
    def units_id(self):
        """Gets the units_id of this AbstractRatingMetadata.  # noqa: E501


        :return: The units_id of this AbstractRatingMetadata.  # noqa: E501
        :rtype: str
        """
        return self._units_id

    @units_id.setter
    def units_id(self, units_id):
        """Sets the units_id of this AbstractRatingMetadata.


        :param units_id: The units_id of this AbstractRatingMetadata.  # noqa: E501
        :type: str
        """

        self._units_id = units_id

    @property
    def active(self):
        """Gets the active of this AbstractRatingMetadata.  # noqa: E501


        :return: The active of this AbstractRatingMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AbstractRatingMetadata.


        :param active: The active of this AbstractRatingMetadata.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def effective_date(self):
        """Gets the effective_date of this AbstractRatingMetadata.  # noqa: E501


        :return: The effective_date of this AbstractRatingMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this AbstractRatingMetadata.


        :param effective_date: The effective_date of this AbstractRatingMetadata.  # noqa: E501
        :type: datetime
        """

        self._effective_date = effective_date

    @property
    def create_date(self):
        """Gets the create_date of this AbstractRatingMetadata.  # noqa: E501


        :return: The create_date of this AbstractRatingMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this AbstractRatingMetadata.


        :param create_date: The create_date of this AbstractRatingMetadata.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def transition_date(self):
        """Gets the transition_date of this AbstractRatingMetadata.  # noqa: E501


        :return: The transition_date of this AbstractRatingMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._transition_date

    @transition_date.setter
    def transition_date(self, transition_date):
        """Sets the transition_date of this AbstractRatingMetadata.


        :param transition_date: The transition_date of this AbstractRatingMetadata.  # noqa: E501
        :type: datetime
        """

        self._transition_date = transition_date

    @property
    def description(self):
        """Gets the description of this AbstractRatingMetadata.  # noqa: E501


        :return: The description of this AbstractRatingMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AbstractRatingMetadata.


        :param description: The description of this AbstractRatingMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vertical_datum_info(self):
        """Gets the vertical_datum_info of this AbstractRatingMetadata.  # noqa: E501


        :return: The vertical_datum_info of this AbstractRatingMetadata.  # noqa: E501
        :rtype: VerticalDatumInfo
        """
        return self._vertical_datum_info

    @vertical_datum_info.setter
    def vertical_datum_info(self, vertical_datum_info):
        """Sets the vertical_datum_info of this AbstractRatingMetadata.


        :param vertical_datum_info: The vertical_datum_info of this AbstractRatingMetadata.  # noqa: E501
        :type: VerticalDatumInfo
        """

        self._vertical_datum_info = vertical_datum_info

    @property
    def rating_type(self):
        """Gets the rating_type of this AbstractRatingMetadata.  # noqa: E501


        :return: The rating_type of this AbstractRatingMetadata.  # noqa: E501
        :rtype: str
        """
        return self._rating_type

    @rating_type.setter
    def rating_type(self, rating_type):
        """Sets the rating_type of this AbstractRatingMetadata.


        :param rating_type: The rating_type of this AbstractRatingMetadata.  # noqa: E501
        :type: str
        """

        self._rating_type = rating_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbstractRatingMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractRatingMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
