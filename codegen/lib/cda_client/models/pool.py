# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute': 'float',
        'description': 'str',
        'clob_text': 'str',
        'project_id': 'str',
        'bottom_level_id': 'str',
        'top_level_id': 'str',
        'implicit': 'bool',
        'pool_name': 'PoolNameType'
    }

    attribute_map = {
        'attribute': 'attribute',
        'description': 'description',
        'clob_text': 'clobText',
        'project_id': 'projectId',
        'bottom_level_id': 'bottomLevelId',
        'top_level_id': 'topLevelId',
        'implicit': 'implicit',
        'pool_name': 'poolName'
    }

    def __init__(self, attribute=None, description=None, clob_text=None, project_id=None, bottom_level_id=None, top_level_id=None, implicit=None, pool_name=None):  # noqa: E501
        """Pool - a model defined in Swagger"""  # noqa: E501
        self._attribute = None
        self._description = None
        self._clob_text = None
        self._project_id = None
        self._bottom_level_id = None
        self._top_level_id = None
        self._implicit = None
        self._pool_name = None
        self.discriminator = None
        if attribute is not None:
            self.attribute = attribute
        if description is not None:
            self.description = description
        if clob_text is not None:
            self.clob_text = clob_text
        if project_id is not None:
            self.project_id = project_id
        if bottom_level_id is not None:
            self.bottom_level_id = bottom_level_id
        if top_level_id is not None:
            self.top_level_id = top_level_id
        if implicit is not None:
            self.implicit = implicit
        if pool_name is not None:
            self.pool_name = pool_name

    @property
    def attribute(self):
        """Gets the attribute of this Pool.  # noqa: E501


        :return: The attribute of this Pool.  # noqa: E501
        :rtype: float
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this Pool.


        :param attribute: The attribute of this Pool.  # noqa: E501
        :type: float
        """

        self._attribute = attribute

    @property
    def description(self):
        """Gets the description of this Pool.  # noqa: E501


        :return: The description of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Pool.


        :param description: The description of this Pool.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def clob_text(self):
        """Gets the clob_text of this Pool.  # noqa: E501


        :return: The clob_text of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._clob_text

    @clob_text.setter
    def clob_text(self, clob_text):
        """Sets the clob_text of this Pool.


        :param clob_text: The clob_text of this Pool.  # noqa: E501
        :type: str
        """

        self._clob_text = clob_text

    @property
    def project_id(self):
        """Gets the project_id of this Pool.  # noqa: E501


        :return: The project_id of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Pool.


        :param project_id: The project_id of this Pool.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def bottom_level_id(self):
        """Gets the bottom_level_id of this Pool.  # noqa: E501


        :return: The bottom_level_id of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._bottom_level_id

    @bottom_level_id.setter
    def bottom_level_id(self, bottom_level_id):
        """Sets the bottom_level_id of this Pool.


        :param bottom_level_id: The bottom_level_id of this Pool.  # noqa: E501
        :type: str
        """

        self._bottom_level_id = bottom_level_id

    @property
    def top_level_id(self):
        """Gets the top_level_id of this Pool.  # noqa: E501


        :return: The top_level_id of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._top_level_id

    @top_level_id.setter
    def top_level_id(self, top_level_id):
        """Sets the top_level_id of this Pool.


        :param top_level_id: The top_level_id of this Pool.  # noqa: E501
        :type: str
        """

        self._top_level_id = top_level_id

    @property
    def implicit(self):
        """Gets the implicit of this Pool.  # noqa: E501


        :return: The implicit of this Pool.  # noqa: E501
        :rtype: bool
        """
        return self._implicit

    @implicit.setter
    def implicit(self, implicit):
        """Sets the implicit of this Pool.


        :param implicit: The implicit of this Pool.  # noqa: E501
        :type: bool
        """

        self._implicit = implicit

    @property
    def pool_name(self):
        """Gets the pool_name of this Pool.  # noqa: E501


        :return: The pool_name of this Pool.  # noqa: E501
        :rtype: PoolNameType
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this Pool.


        :param pool_name: The pool_name of this Pool.  # noqa: E501
        :type: PoolNameType
        """

        self._pool_name = pool_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
