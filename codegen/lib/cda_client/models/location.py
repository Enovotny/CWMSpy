# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'name': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'active': 'bool',
        'public_name': 'str',
        'long_name': 'str',
        'description': 'str',
        'timezone_name': 'str',
        'location_type': 'str',
        'location_kind': 'str',
        'nation': 'str',
        'state_initial': 'str',
        'county_name': 'str',
        'nearest_city': 'str',
        'horizontal_datum': 'str',
        'published_longitude': 'float',
        'published_latitude': 'float',
        'vertical_datum': 'str',
        'elevation': 'float',
        'map_label': 'str',
        'bounding_office_id': 'str'
    }

    attribute_map = {
        'office_id': 'office-id',
        'name': 'name',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'active': 'active',
        'public_name': 'public-name',
        'long_name': 'long-name',
        'description': 'description',
        'timezone_name': 'timezone-name',
        'location_type': 'location-type',
        'location_kind': 'location-kind',
        'nation': 'nation',
        'state_initial': 'state-initial',
        'county_name': 'county-name',
        'nearest_city': 'nearest-city',
        'horizontal_datum': 'horizontal-datum',
        'published_longitude': 'published-longitude',
        'published_latitude': 'published-latitude',
        'vertical_datum': 'vertical-datum',
        'elevation': 'elevation',
        'map_label': 'map-label',
        'bounding_office_id': 'bounding-office-id'
    }

    def __init__(self, office_id=None, name=None, latitude=None, longitude=None, active=None, public_name=None, long_name=None, description=None, timezone_name=None, location_type=None, location_kind=None, nation=None, state_initial=None, county_name=None, nearest_city=None, horizontal_datum=None, published_longitude=None, published_latitude=None, vertical_datum=None, elevation=None, map_label=None, bounding_office_id=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._name = None
        self._latitude = None
        self._longitude = None
        self._active = None
        self._public_name = None
        self._long_name = None
        self._description = None
        self._timezone_name = None
        self._location_type = None
        self._location_kind = None
        self._nation = None
        self._state_initial = None
        self._county_name = None
        self._nearest_city = None
        self._horizontal_datum = None
        self._published_longitude = None
        self._published_latitude = None
        self._vertical_datum = None
        self._elevation = None
        self._map_label = None
        self._bounding_office_id = None
        self.discriminator = None
        self.office_id = office_id
        self.name = name
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if active is not None:
            self.active = active
        if public_name is not None:
            self.public_name = public_name
        if long_name is not None:
            self.long_name = long_name
        if description is not None:
            self.description = description
        if timezone_name is not None:
            self.timezone_name = timezone_name
        if location_type is not None:
            self.location_type = location_type
        if location_kind is not None:
            self.location_kind = location_kind
        if nation is not None:
            self.nation = nation
        if state_initial is not None:
            self.state_initial = state_initial
        if county_name is not None:
            self.county_name = county_name
        if nearest_city is not None:
            self.nearest_city = nearest_city
        if horizontal_datum is not None:
            self.horizontal_datum = horizontal_datum
        if published_longitude is not None:
            self.published_longitude = published_longitude
        if published_latitude is not None:
            self.published_latitude = published_latitude
        if vertical_datum is not None:
            self.vertical_datum = vertical_datum
        if elevation is not None:
            self.elevation = elevation
        if map_label is not None:
            self.map_label = map_label
        if bounding_office_id is not None:
            self.bounding_office_id = bounding_office_id

    @property
    def office_id(self):
        """Gets the office_id of this Location.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this Location.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this Location.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this Location.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def name(self):
        """Gets the name of this Location.  # noqa: E501


        :return: The name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.


        :param name: The name of this Location.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def latitude(self):
        """Gets the latitude of this Location.  # noqa: E501


        :return: The latitude of this Location.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Location.


        :param latitude: The latitude of this Location.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Location.  # noqa: E501


        :return: The longitude of this Location.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Location.


        :param longitude: The longitude of this Location.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def active(self):
        """Gets the active of this Location.  # noqa: E501


        :return: The active of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Location.


        :param active: The active of this Location.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def public_name(self):
        """Gets the public_name of this Location.  # noqa: E501


        :return: The public_name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name):
        """Sets the public_name of this Location.


        :param public_name: The public_name of this Location.  # noqa: E501
        :type: str
        """

        self._public_name = public_name

    @property
    def long_name(self):
        """Gets the long_name of this Location.  # noqa: E501


        :return: The long_name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this Location.


        :param long_name: The long_name of this Location.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def description(self):
        """Gets the description of this Location.  # noqa: E501


        :return: The description of this Location.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Location.


        :param description: The description of this Location.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def timezone_name(self):
        """Gets the timezone_name of this Location.  # noqa: E501


        :return: The timezone_name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._timezone_name

    @timezone_name.setter
    def timezone_name(self, timezone_name):
        """Sets the timezone_name of this Location.


        :param timezone_name: The timezone_name of this Location.  # noqa: E501
        :type: str
        """

        self._timezone_name = timezone_name

    @property
    def location_type(self):
        """Gets the location_type of this Location.  # noqa: E501


        :return: The location_type of this Location.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Location.


        :param location_type: The location_type of this Location.  # noqa: E501
        :type: str
        """

        self._location_type = location_type

    @property
    def location_kind(self):
        """Gets the location_kind of this Location.  # noqa: E501


        :return: The location_kind of this Location.  # noqa: E501
        :rtype: str
        """
        return self._location_kind

    @location_kind.setter
    def location_kind(self, location_kind):
        """Sets the location_kind of this Location.


        :param location_kind: The location_kind of this Location.  # noqa: E501
        :type: str
        """

        self._location_kind = location_kind

    @property
    def nation(self):
        """Gets the nation of this Location.  # noqa: E501


        :return: The nation of this Location.  # noqa: E501
        :rtype: str
        """
        return self._nation

    @nation.setter
    def nation(self, nation):
        """Sets the nation of this Location.


        :param nation: The nation of this Location.  # noqa: E501
        :type: str
        """
        allowed_values = ["US", "CANADA", "MEXICO"]  # noqa: E501
        if nation not in allowed_values:
            raise ValueError(
                "Invalid value for `nation` ({0}), must be one of {1}"  # noqa: E501
                .format(nation, allowed_values)
            )

        self._nation = nation

    @property
    def state_initial(self):
        """Gets the state_initial of this Location.  # noqa: E501


        :return: The state_initial of this Location.  # noqa: E501
        :rtype: str
        """
        return self._state_initial

    @state_initial.setter
    def state_initial(self, state_initial):
        """Sets the state_initial of this Location.


        :param state_initial: The state_initial of this Location.  # noqa: E501
        :type: str
        """

        self._state_initial = state_initial

    @property
    def county_name(self):
        """Gets the county_name of this Location.  # noqa: E501


        :return: The county_name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._county_name

    @county_name.setter
    def county_name(self, county_name):
        """Sets the county_name of this Location.


        :param county_name: The county_name of this Location.  # noqa: E501
        :type: str
        """

        self._county_name = county_name

    @property
    def nearest_city(self):
        """Gets the nearest_city of this Location.  # noqa: E501


        :return: The nearest_city of this Location.  # noqa: E501
        :rtype: str
        """
        return self._nearest_city

    @nearest_city.setter
    def nearest_city(self, nearest_city):
        """Sets the nearest_city of this Location.


        :param nearest_city: The nearest_city of this Location.  # noqa: E501
        :type: str
        """

        self._nearest_city = nearest_city

    @property
    def horizontal_datum(self):
        """Gets the horizontal_datum of this Location.  # noqa: E501


        :return: The horizontal_datum of this Location.  # noqa: E501
        :rtype: str
        """
        return self._horizontal_datum

    @horizontal_datum.setter
    def horizontal_datum(self, horizontal_datum):
        """Sets the horizontal_datum of this Location.


        :param horizontal_datum: The horizontal_datum of this Location.  # noqa: E501
        :type: str
        """

        self._horizontal_datum = horizontal_datum

    @property
    def published_longitude(self):
        """Gets the published_longitude of this Location.  # noqa: E501


        :return: The published_longitude of this Location.  # noqa: E501
        :rtype: float
        """
        return self._published_longitude

    @published_longitude.setter
    def published_longitude(self, published_longitude):
        """Sets the published_longitude of this Location.


        :param published_longitude: The published_longitude of this Location.  # noqa: E501
        :type: float
        """

        self._published_longitude = published_longitude

    @property
    def published_latitude(self):
        """Gets the published_latitude of this Location.  # noqa: E501


        :return: The published_latitude of this Location.  # noqa: E501
        :rtype: float
        """
        return self._published_latitude

    @published_latitude.setter
    def published_latitude(self, published_latitude):
        """Sets the published_latitude of this Location.


        :param published_latitude: The published_latitude of this Location.  # noqa: E501
        :type: float
        """

        self._published_latitude = published_latitude

    @property
    def vertical_datum(self):
        """Gets the vertical_datum of this Location.  # noqa: E501


        :return: The vertical_datum of this Location.  # noqa: E501
        :rtype: str
        """
        return self._vertical_datum

    @vertical_datum.setter
    def vertical_datum(self, vertical_datum):
        """Sets the vertical_datum of this Location.


        :param vertical_datum: The vertical_datum of this Location.  # noqa: E501
        :type: str
        """

        self._vertical_datum = vertical_datum

    @property
    def elevation(self):
        """Gets the elevation of this Location.  # noqa: E501


        :return: The elevation of this Location.  # noqa: E501
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this Location.


        :param elevation: The elevation of this Location.  # noqa: E501
        :type: float
        """

        self._elevation = elevation

    @property
    def map_label(self):
        """Gets the map_label of this Location.  # noqa: E501


        :return: The map_label of this Location.  # noqa: E501
        :rtype: str
        """
        return self._map_label

    @map_label.setter
    def map_label(self, map_label):
        """Sets the map_label of this Location.


        :param map_label: The map_label of this Location.  # noqa: E501
        :type: str
        """

        self._map_label = map_label

    @property
    def bounding_office_id(self):
        """Gets the bounding_office_id of this Location.  # noqa: E501


        :return: The bounding_office_id of this Location.  # noqa: E501
        :rtype: str
        """
        return self._bounding_office_id

    @bounding_office_id.setter
    def bounding_office_id(self, bounding_office_id):
        """Sets the bounding_office_id of this Location.


        :param bounding_office_id: The bounding_office_id of this Location.  # noqa: E501
        :type: str
        """

        self._bounding_office_id = bounding_office_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
