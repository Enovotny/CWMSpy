# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RatingSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'rating_id': 'str',
        'template_id': 'str',
        'location_id': 'str',
        'version': 'str',
        'source_agency': 'str',
        'in_range_method': 'str',
        'out_range_low_method': 'str',
        'out_range_high_method': 'str',
        'active': 'bool',
        'auto_update': 'bool',
        'auto_activate': 'bool',
        'auto_migrate_extension': 'bool',
        'independent_rounding_specs': 'list[IndependentRoundingSpec]',
        'dependent_rounding_spec': 'str',
        'description': 'str',
        'effective_dates': 'list[datetime]'
    }

    attribute_map = {
        'office_id': 'office-id',
        'rating_id': 'rating-id',
        'template_id': 'template-id',
        'location_id': 'location-id',
        'version': 'version',
        'source_agency': 'source-agency',
        'in_range_method': 'in-range-method',
        'out_range_low_method': 'out-range-low-method',
        'out_range_high_method': 'out-range-high-method',
        'active': 'active',
        'auto_update': 'auto-update',
        'auto_activate': 'auto-activate',
        'auto_migrate_extension': 'auto-migrate-extension',
        'independent_rounding_specs': 'independent-rounding-specs',
        'dependent_rounding_spec': 'dependent-rounding-spec',
        'description': 'description',
        'effective_dates': 'effective-dates'
    }

    def __init__(self, office_id=None, rating_id=None, template_id=None, location_id=None, version=None, source_agency=None, in_range_method=None, out_range_low_method=None, out_range_high_method=None, active=None, auto_update=None, auto_activate=None, auto_migrate_extension=None, independent_rounding_specs=None, dependent_rounding_spec=None, description=None, effective_dates=None):  # noqa: E501
        """RatingSpec - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._rating_id = None
        self._template_id = None
        self._location_id = None
        self._version = None
        self._source_agency = None
        self._in_range_method = None
        self._out_range_low_method = None
        self._out_range_high_method = None
        self._active = None
        self._auto_update = None
        self._auto_activate = None
        self._auto_migrate_extension = None
        self._independent_rounding_specs = None
        self._dependent_rounding_spec = None
        self._description = None
        self._effective_dates = None
        self.discriminator = None
        self.office_id = office_id
        if rating_id is not None:
            self.rating_id = rating_id
        if template_id is not None:
            self.template_id = template_id
        if location_id is not None:
            self.location_id = location_id
        if version is not None:
            self.version = version
        if source_agency is not None:
            self.source_agency = source_agency
        if in_range_method is not None:
            self.in_range_method = in_range_method
        if out_range_low_method is not None:
            self.out_range_low_method = out_range_low_method
        if out_range_high_method is not None:
            self.out_range_high_method = out_range_high_method
        if active is not None:
            self.active = active
        if auto_update is not None:
            self.auto_update = auto_update
        if auto_activate is not None:
            self.auto_activate = auto_activate
        if auto_migrate_extension is not None:
            self.auto_migrate_extension = auto_migrate_extension
        if independent_rounding_specs is not None:
            self.independent_rounding_specs = independent_rounding_specs
        if dependent_rounding_spec is not None:
            self.dependent_rounding_spec = dependent_rounding_spec
        if description is not None:
            self.description = description
        if effective_dates is not None:
            self.effective_dates = effective_dates

    @property
    def office_id(self):
        """Gets the office_id of this RatingSpec.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this RatingSpec.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this RatingSpec.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def rating_id(self):
        """Gets the rating_id of this RatingSpec.  # noqa: E501


        :return: The rating_id of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._rating_id

    @rating_id.setter
    def rating_id(self, rating_id):
        """Sets the rating_id of this RatingSpec.


        :param rating_id: The rating_id of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._rating_id = rating_id

    @property
    def template_id(self):
        """Gets the template_id of this RatingSpec.  # noqa: E501


        :return: The template_id of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this RatingSpec.


        :param template_id: The template_id of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def location_id(self):
        """Gets the location_id of this RatingSpec.  # noqa: E501


        :return: The location_id of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this RatingSpec.


        :param location_id: The location_id of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def version(self):
        """Gets the version of this RatingSpec.  # noqa: E501


        :return: The version of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RatingSpec.


        :param version: The version of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def source_agency(self):
        """Gets the source_agency of this RatingSpec.  # noqa: E501


        :return: The source_agency of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._source_agency

    @source_agency.setter
    def source_agency(self, source_agency):
        """Sets the source_agency of this RatingSpec.


        :param source_agency: The source_agency of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._source_agency = source_agency

    @property
    def in_range_method(self):
        """Gets the in_range_method of this RatingSpec.  # noqa: E501


        :return: The in_range_method of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._in_range_method

    @in_range_method.setter
    def in_range_method(self, in_range_method):
        """Sets the in_range_method of this RatingSpec.


        :param in_range_method: The in_range_method of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._in_range_method = in_range_method

    @property
    def out_range_low_method(self):
        """Gets the out_range_low_method of this RatingSpec.  # noqa: E501


        :return: The out_range_low_method of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._out_range_low_method

    @out_range_low_method.setter
    def out_range_low_method(self, out_range_low_method):
        """Sets the out_range_low_method of this RatingSpec.


        :param out_range_low_method: The out_range_low_method of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._out_range_low_method = out_range_low_method

    @property
    def out_range_high_method(self):
        """Gets the out_range_high_method of this RatingSpec.  # noqa: E501


        :return: The out_range_high_method of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._out_range_high_method

    @out_range_high_method.setter
    def out_range_high_method(self, out_range_high_method):
        """Sets the out_range_high_method of this RatingSpec.


        :param out_range_high_method: The out_range_high_method of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._out_range_high_method = out_range_high_method

    @property
    def active(self):
        """Gets the active of this RatingSpec.  # noqa: E501


        :return: The active of this RatingSpec.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this RatingSpec.


        :param active: The active of this RatingSpec.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def auto_update(self):
        """Gets the auto_update of this RatingSpec.  # noqa: E501


        :return: The auto_update of this RatingSpec.  # noqa: E501
        :rtype: bool
        """
        return self._auto_update

    @auto_update.setter
    def auto_update(self, auto_update):
        """Sets the auto_update of this RatingSpec.


        :param auto_update: The auto_update of this RatingSpec.  # noqa: E501
        :type: bool
        """

        self._auto_update = auto_update

    @property
    def auto_activate(self):
        """Gets the auto_activate of this RatingSpec.  # noqa: E501


        :return: The auto_activate of this RatingSpec.  # noqa: E501
        :rtype: bool
        """
        return self._auto_activate

    @auto_activate.setter
    def auto_activate(self, auto_activate):
        """Sets the auto_activate of this RatingSpec.


        :param auto_activate: The auto_activate of this RatingSpec.  # noqa: E501
        :type: bool
        """

        self._auto_activate = auto_activate

    @property
    def auto_migrate_extension(self):
        """Gets the auto_migrate_extension of this RatingSpec.  # noqa: E501


        :return: The auto_migrate_extension of this RatingSpec.  # noqa: E501
        :rtype: bool
        """
        return self._auto_migrate_extension

    @auto_migrate_extension.setter
    def auto_migrate_extension(self, auto_migrate_extension):
        """Sets the auto_migrate_extension of this RatingSpec.


        :param auto_migrate_extension: The auto_migrate_extension of this RatingSpec.  # noqa: E501
        :type: bool
        """

        self._auto_migrate_extension = auto_migrate_extension

    @property
    def independent_rounding_specs(self):
        """Gets the independent_rounding_specs of this RatingSpec.  # noqa: E501


        :return: The independent_rounding_specs of this RatingSpec.  # noqa: E501
        :rtype: list[IndependentRoundingSpec]
        """
        return self._independent_rounding_specs

    @independent_rounding_specs.setter
    def independent_rounding_specs(self, independent_rounding_specs):
        """Sets the independent_rounding_specs of this RatingSpec.


        :param independent_rounding_specs: The independent_rounding_specs of this RatingSpec.  # noqa: E501
        :type: list[IndependentRoundingSpec]
        """

        self._independent_rounding_specs = independent_rounding_specs

    @property
    def dependent_rounding_spec(self):
        """Gets the dependent_rounding_spec of this RatingSpec.  # noqa: E501


        :return: The dependent_rounding_spec of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._dependent_rounding_spec

    @dependent_rounding_spec.setter
    def dependent_rounding_spec(self, dependent_rounding_spec):
        """Sets the dependent_rounding_spec of this RatingSpec.


        :param dependent_rounding_spec: The dependent_rounding_spec of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._dependent_rounding_spec = dependent_rounding_spec

    @property
    def description(self):
        """Gets the description of this RatingSpec.  # noqa: E501


        :return: The description of this RatingSpec.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RatingSpec.


        :param description: The description of this RatingSpec.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def effective_dates(self):
        """Gets the effective_dates of this RatingSpec.  # noqa: E501


        :return: The effective_dates of this RatingSpec.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._effective_dates

    @effective_dates.setter
    def effective_dates(self, effective_dates):
        """Sets the effective_dates of this RatingSpec.


        :param effective_dates: The effective_dates of this RatingSpec.  # noqa: E501
        :type: list[datetime]
        """

        self._effective_dates = effective_dates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RatingSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatingSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
