# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StreamReach(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'upstream_location_name': 'str',
        'downstream_location_name': 'str',
        'stream_name': 'str',
        'reach_name': 'str',
        'comment': 'str',
        'configuration': 'str'
    }

    attribute_map = {
        'office_id': 'office-id',
        'upstream_location_name': 'upstream-location-name',
        'downstream_location_name': 'downstream-location-name',
        'stream_name': 'stream-name',
        'reach_name': 'reach-name',
        'comment': 'comment',
        'configuration': 'configuration'
    }

    def __init__(self, office_id=None, upstream_location_name=None, downstream_location_name=None, stream_name=None, reach_name=None, comment=None, configuration=None):  # noqa: E501
        """StreamReach - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._upstream_location_name = None
        self._downstream_location_name = None
        self._stream_name = None
        self._reach_name = None
        self._comment = None
        self._configuration = None
        self.discriminator = None
        self.office_id = office_id
        if upstream_location_name is not None:
            self.upstream_location_name = upstream_location_name
        if downstream_location_name is not None:
            self.downstream_location_name = downstream_location_name
        if stream_name is not None:
            self.stream_name = stream_name
        if reach_name is not None:
            self.reach_name = reach_name
        if comment is not None:
            self.comment = comment
        if configuration is not None:
            self.configuration = configuration

    @property
    def office_id(self):
        """Gets the office_id of this StreamReach.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this StreamReach.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this StreamReach.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this StreamReach.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def upstream_location_name(self):
        """Gets the upstream_location_name of this StreamReach.  # noqa: E501


        :return: The upstream_location_name of this StreamReach.  # noqa: E501
        :rtype: str
        """
        return self._upstream_location_name

    @upstream_location_name.setter
    def upstream_location_name(self, upstream_location_name):
        """Sets the upstream_location_name of this StreamReach.


        :param upstream_location_name: The upstream_location_name of this StreamReach.  # noqa: E501
        :type: str
        """

        self._upstream_location_name = upstream_location_name

    @property
    def downstream_location_name(self):
        """Gets the downstream_location_name of this StreamReach.  # noqa: E501


        :return: The downstream_location_name of this StreamReach.  # noqa: E501
        :rtype: str
        """
        return self._downstream_location_name

    @downstream_location_name.setter
    def downstream_location_name(self, downstream_location_name):
        """Sets the downstream_location_name of this StreamReach.


        :param downstream_location_name: The downstream_location_name of this StreamReach.  # noqa: E501
        :type: str
        """

        self._downstream_location_name = downstream_location_name

    @property
    def stream_name(self):
        """Gets the stream_name of this StreamReach.  # noqa: E501


        :return: The stream_name of this StreamReach.  # noqa: E501
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this StreamReach.


        :param stream_name: The stream_name of this StreamReach.  # noqa: E501
        :type: str
        """

        self._stream_name = stream_name

    @property
    def reach_name(self):
        """Gets the reach_name of this StreamReach.  # noqa: E501


        :return: The reach_name of this StreamReach.  # noqa: E501
        :rtype: str
        """
        return self._reach_name

    @reach_name.setter
    def reach_name(self, reach_name):
        """Sets the reach_name of this StreamReach.


        :param reach_name: The reach_name of this StreamReach.  # noqa: E501
        :type: str
        """

        self._reach_name = reach_name

    @property
    def comment(self):
        """Gets the comment of this StreamReach.  # noqa: E501


        :return: The comment of this StreamReach.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this StreamReach.


        :param comment: The comment of this StreamReach.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def configuration(self):
        """Gets the configuration of this StreamReach.  # noqa: E501


        :return: The configuration of this StreamReach.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this StreamReach.


        :param configuration: The configuration of this StreamReach.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StreamReach, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamReach):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
