# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StreamLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'location_name': 'str',
        'stream_name': 'str',
        'station': 'float',
        'bank': 'str',
        'published_station': 'float',
        'lowest_measurable_stage': 'float',
        'total_drainage_area': 'float',
        'ungaged_drainage_area': 'float',
        'nagivation_station': 'float'
    }

    attribute_map = {
        'office_id': 'office-id',
        'location_name': 'location-name',
        'stream_name': 'stream-name',
        'station': 'station',
        'bank': 'bank',
        'published_station': 'published-station',
        'lowest_measurable_stage': 'lowest-measurable-stage',
        'total_drainage_area': 'total-drainage-area',
        'ungaged_drainage_area': 'ungaged-drainage-area',
        'nagivation_station': 'nagivation-station'
    }

    def __init__(self, office_id=None, location_name=None, stream_name=None, station=None, bank=None, published_station=None, lowest_measurable_stage=None, total_drainage_area=None, ungaged_drainage_area=None, nagivation_station=None):  # noqa: E501
        """StreamLocation - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._location_name = None
        self._stream_name = None
        self._station = None
        self._bank = None
        self._published_station = None
        self._lowest_measurable_stage = None
        self._total_drainage_area = None
        self._ungaged_drainage_area = None
        self._nagivation_station = None
        self.discriminator = None
        self.office_id = office_id
        if location_name is not None:
            self.location_name = location_name
        if stream_name is not None:
            self.stream_name = stream_name
        if station is not None:
            self.station = station
        if bank is not None:
            self.bank = bank
        if published_station is not None:
            self.published_station = published_station
        if lowest_measurable_stage is not None:
            self.lowest_measurable_stage = lowest_measurable_stage
        if total_drainage_area is not None:
            self.total_drainage_area = total_drainage_area
        if ungaged_drainage_area is not None:
            self.ungaged_drainage_area = ungaged_drainage_area
        if nagivation_station is not None:
            self.nagivation_station = nagivation_station

    @property
    def office_id(self):
        """Gets the office_id of this StreamLocation.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this StreamLocation.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this StreamLocation.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this StreamLocation.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def location_name(self):
        """Gets the location_name of this StreamLocation.  # noqa: E501


        :return: The location_name of this StreamLocation.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this StreamLocation.


        :param location_name: The location_name of this StreamLocation.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def stream_name(self):
        """Gets the stream_name of this StreamLocation.  # noqa: E501


        :return: The stream_name of this StreamLocation.  # noqa: E501
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this StreamLocation.


        :param stream_name: The stream_name of this StreamLocation.  # noqa: E501
        :type: str
        """

        self._stream_name = stream_name

    @property
    def station(self):
        """Gets the station of this StreamLocation.  # noqa: E501


        :return: The station of this StreamLocation.  # noqa: E501
        :rtype: float
        """
        return self._station

    @station.setter
    def station(self, station):
        """Sets the station of this StreamLocation.


        :param station: The station of this StreamLocation.  # noqa: E501
        :type: float
        """

        self._station = station

    @property
    def bank(self):
        """Gets the bank of this StreamLocation.  # noqa: E501


        :return: The bank of this StreamLocation.  # noqa: E501
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this StreamLocation.


        :param bank: The bank of this StreamLocation.  # noqa: E501
        :type: str
        """

        self._bank = bank

    @property
    def published_station(self):
        """Gets the published_station of this StreamLocation.  # noqa: E501


        :return: The published_station of this StreamLocation.  # noqa: E501
        :rtype: float
        """
        return self._published_station

    @published_station.setter
    def published_station(self, published_station):
        """Sets the published_station of this StreamLocation.


        :param published_station: The published_station of this StreamLocation.  # noqa: E501
        :type: float
        """

        self._published_station = published_station

    @property
    def lowest_measurable_stage(self):
        """Gets the lowest_measurable_stage of this StreamLocation.  # noqa: E501


        :return: The lowest_measurable_stage of this StreamLocation.  # noqa: E501
        :rtype: float
        """
        return self._lowest_measurable_stage

    @lowest_measurable_stage.setter
    def lowest_measurable_stage(self, lowest_measurable_stage):
        """Sets the lowest_measurable_stage of this StreamLocation.


        :param lowest_measurable_stage: The lowest_measurable_stage of this StreamLocation.  # noqa: E501
        :type: float
        """

        self._lowest_measurable_stage = lowest_measurable_stage

    @property
    def total_drainage_area(self):
        """Gets the total_drainage_area of this StreamLocation.  # noqa: E501


        :return: The total_drainage_area of this StreamLocation.  # noqa: E501
        :rtype: float
        """
        return self._total_drainage_area

    @total_drainage_area.setter
    def total_drainage_area(self, total_drainage_area):
        """Sets the total_drainage_area of this StreamLocation.


        :param total_drainage_area: The total_drainage_area of this StreamLocation.  # noqa: E501
        :type: float
        """

        self._total_drainage_area = total_drainage_area

    @property
    def ungaged_drainage_area(self):
        """Gets the ungaged_drainage_area of this StreamLocation.  # noqa: E501


        :return: The ungaged_drainage_area of this StreamLocation.  # noqa: E501
        :rtype: float
        """
        return self._ungaged_drainage_area

    @ungaged_drainage_area.setter
    def ungaged_drainage_area(self, ungaged_drainage_area):
        """Sets the ungaged_drainage_area of this StreamLocation.


        :param ungaged_drainage_area: The ungaged_drainage_area of this StreamLocation.  # noqa: E501
        :type: float
        """

        self._ungaged_drainage_area = ungaged_drainage_area

    @property
    def nagivation_station(self):
        """Gets the nagivation_station of this StreamLocation.  # noqa: E501


        :return: The nagivation_station of this StreamLocation.  # noqa: E501
        :rtype: float
        """
        return self._nagivation_station

    @nagivation_station.setter
    def nagivation_station(self, nagivation_station):
        """Sets the nagivation_station of this StreamLocation.


        :param nagivation_station: The nagivation_station of this StreamLocation.  # noqa: E501
        :type: float
        """

        self._nagivation_station = nagivation_station

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StreamLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
