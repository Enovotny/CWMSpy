# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssignedLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location_id': 'str',
        'office_id': 'str',
        'alias_id': 'str',
        'attribute': 'float',
        'ref_location_id': 'str'
    }

    attribute_map = {
        'location_id': 'locationId',
        'office_id': 'officeId',
        'alias_id': 'aliasId',
        'attribute': 'attribute',
        'ref_location_id': 'refLocationId'
    }

    def __init__(self, location_id=None, office_id=None, alias_id=None, attribute=None, ref_location_id=None):  # noqa: E501
        """AssignedLocation - a model defined in Swagger"""  # noqa: E501
        self._location_id = None
        self._office_id = None
        self._alias_id = None
        self._attribute = None
        self._ref_location_id = None
        self.discriminator = None
        if location_id is not None:
            self.location_id = location_id
        if office_id is not None:
            self.office_id = office_id
        if alias_id is not None:
            self.alias_id = alias_id
        if attribute is not None:
            self.attribute = attribute
        if ref_location_id is not None:
            self.ref_location_id = ref_location_id

    @property
    def location_id(self):
        """Gets the location_id of this AssignedLocation.  # noqa: E501


        :return: The location_id of this AssignedLocation.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this AssignedLocation.


        :param location_id: The location_id of this AssignedLocation.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def office_id(self):
        """Gets the office_id of this AssignedLocation.  # noqa: E501


        :return: The office_id of this AssignedLocation.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this AssignedLocation.


        :param office_id: The office_id of this AssignedLocation.  # noqa: E501
        :type: str
        """

        self._office_id = office_id

    @property
    def alias_id(self):
        """Gets the alias_id of this AssignedLocation.  # noqa: E501


        :return: The alias_id of this AssignedLocation.  # noqa: E501
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """Sets the alias_id of this AssignedLocation.


        :param alias_id: The alias_id of this AssignedLocation.  # noqa: E501
        :type: str
        """

        self._alias_id = alias_id

    @property
    def attribute(self):
        """Gets the attribute of this AssignedLocation.  # noqa: E501


        :return: The attribute of this AssignedLocation.  # noqa: E501
        :rtype: float
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this AssignedLocation.


        :param attribute: The attribute of this AssignedLocation.  # noqa: E501
        :type: float
        """

        self._attribute = attribute

    @property
    def ref_location_id(self):
        """Gets the ref_location_id of this AssignedLocation.  # noqa: E501


        :return: The ref_location_id of this AssignedLocation.  # noqa: E501
        :rtype: str
        """
        return self._ref_location_id

    @ref_location_id.setter
    def ref_location_id(self, ref_location_id):
        """Sets the ref_location_id of this AssignedLocation.


        :param ref_location_id: The ref_location_id of this AssignedLocation.  # noqa: E501
        :type: str
        """

        self._ref_location_id = ref_location_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignedLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignedLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
