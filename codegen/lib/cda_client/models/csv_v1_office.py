# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CsvV1Office(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office': 'str',
        'long_name': 'str',
        'office_type': 'str',
        'reports_to_office': 'str'
    }

    attribute_map = {
        'office': 'Office',
        'long_name': 'longName',
        'office_type': 'officeType',
        'reports_to_office': 'reportsToOffice'
    }

    def __init__(self, office=None, long_name=None, office_type=None, reports_to_office=None):  # noqa: E501
        """CsvV1Office - a model defined in Swagger"""  # noqa: E501
        self._office = None
        self._long_name = None
        self._office_type = None
        self._reports_to_office = None
        self.discriminator = None
        if office is not None:
            self.office = office
        if long_name is not None:
            self.long_name = long_name
        if office_type is not None:
            self.office_type = office_type
        if reports_to_office is not None:
            self.reports_to_office = reports_to_office

    @property
    def office(self):
        """Gets the office of this CsvV1Office.  # noqa: E501


        :return: The office of this CsvV1Office.  # noqa: E501
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this CsvV1Office.


        :param office: The office of this CsvV1Office.  # noqa: E501
        :type: str
        """

        self._office = office

    @property
    def long_name(self):
        """Gets the long_name of this CsvV1Office.  # noqa: E501


        :return: The long_name of this CsvV1Office.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this CsvV1Office.


        :param long_name: The long_name of this CsvV1Office.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def office_type(self):
        """Gets the office_type of this CsvV1Office.  # noqa: E501


        :return: The office_type of this CsvV1Office.  # noqa: E501
        :rtype: str
        """
        return self._office_type

    @office_type.setter
    def office_type(self, office_type):
        """Sets the office_type of this CsvV1Office.


        :param office_type: The office_type of this CsvV1Office.  # noqa: E501
        :type: str
        """

        self._office_type = office_type

    @property
    def reports_to_office(self):
        """Gets the reports_to_office of this CsvV1Office.  # noqa: E501


        :return: The reports_to_office of this CsvV1Office.  # noqa: E501
        :rtype: str
        """
        return self._reports_to_office

    @reports_to_office.setter
    def reports_to_office(self, reports_to_office):
        """Sets the reports_to_office of this CsvV1Office.


        :param reports_to_office: The reports_to_office of this CsvV1Office.  # noqa: E501
        :type: str
        """

        self._reports_to_office = reports_to_office

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsvV1Office, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsvV1Office):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
