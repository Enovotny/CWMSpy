# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeSeriesGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'id': 'str',
        'time_series_category': 'TimeSeriesCategory',
        'description': 'str',
        'shared_alias_id': 'str',
        'shared_ref_ts_id': 'str',
        'assigned_time_series': 'list[AssignedTimeSeries]'
    }

    attribute_map = {
        'office_id': 'office-id',
        'id': 'id',
        'time_series_category': 'time-series-category',
        'description': 'description',
        'shared_alias_id': 'shared-alias-id',
        'shared_ref_ts_id': 'shared-ref-ts-id',
        'assigned_time_series': 'assigned-time-series'
    }

    def __init__(self, office_id=None, id=None, time_series_category=None, description=None, shared_alias_id=None, shared_ref_ts_id=None, assigned_time_series=None):  # noqa: E501
        """TimeSeriesGroup - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._id = None
        self._time_series_category = None
        self._description = None
        self._shared_alias_id = None
        self._shared_ref_ts_id = None
        self._assigned_time_series = None
        self.discriminator = None
        self.office_id = office_id
        if id is not None:
            self.id = id
        if time_series_category is not None:
            self.time_series_category = time_series_category
        if description is not None:
            self.description = description
        if shared_alias_id is not None:
            self.shared_alias_id = shared_alias_id
        if shared_ref_ts_id is not None:
            self.shared_ref_ts_id = shared_ref_ts_id
        if assigned_time_series is not None:
            self.assigned_time_series = assigned_time_series

    @property
    def office_id(self):
        """Gets the office_id of this TimeSeriesGroup.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this TimeSeriesGroup.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this TimeSeriesGroup.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this TimeSeriesGroup.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def id(self):
        """Gets the id of this TimeSeriesGroup.  # noqa: E501


        :return: The id of this TimeSeriesGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeSeriesGroup.


        :param id: The id of this TimeSeriesGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def time_series_category(self):
        """Gets the time_series_category of this TimeSeriesGroup.  # noqa: E501


        :return: The time_series_category of this TimeSeriesGroup.  # noqa: E501
        :rtype: TimeSeriesCategory
        """
        return self._time_series_category

    @time_series_category.setter
    def time_series_category(self, time_series_category):
        """Sets the time_series_category of this TimeSeriesGroup.


        :param time_series_category: The time_series_category of this TimeSeriesGroup.  # noqa: E501
        :type: TimeSeriesCategory
        """

        self._time_series_category = time_series_category

    @property
    def description(self):
        """Gets the description of this TimeSeriesGroup.  # noqa: E501


        :return: The description of this TimeSeriesGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TimeSeriesGroup.


        :param description: The description of this TimeSeriesGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def shared_alias_id(self):
        """Gets the shared_alias_id of this TimeSeriesGroup.  # noqa: E501


        :return: The shared_alias_id of this TimeSeriesGroup.  # noqa: E501
        :rtype: str
        """
        return self._shared_alias_id

    @shared_alias_id.setter
    def shared_alias_id(self, shared_alias_id):
        """Sets the shared_alias_id of this TimeSeriesGroup.


        :param shared_alias_id: The shared_alias_id of this TimeSeriesGroup.  # noqa: E501
        :type: str
        """

        self._shared_alias_id = shared_alias_id

    @property
    def shared_ref_ts_id(self):
        """Gets the shared_ref_ts_id of this TimeSeriesGroup.  # noqa: E501


        :return: The shared_ref_ts_id of this TimeSeriesGroup.  # noqa: E501
        :rtype: str
        """
        return self._shared_ref_ts_id

    @shared_ref_ts_id.setter
    def shared_ref_ts_id(self, shared_ref_ts_id):
        """Sets the shared_ref_ts_id of this TimeSeriesGroup.


        :param shared_ref_ts_id: The shared_ref_ts_id of this TimeSeriesGroup.  # noqa: E501
        :type: str
        """

        self._shared_ref_ts_id = shared_ref_ts_id

    @property
    def assigned_time_series(self):
        """Gets the assigned_time_series of this TimeSeriesGroup.  # noqa: E501


        :return: The assigned_time_series of this TimeSeriesGroup.  # noqa: E501
        :rtype: list[AssignedTimeSeries]
        """
        return self._assigned_time_series

    @assigned_time_series.setter
    def assigned_time_series(self, assigned_time_series):
        """Sets the assigned_time_series of this TimeSeriesGroup.


        :param assigned_time_series: The assigned_time_series of this TimeSeriesGroup.  # noqa: E501
        :type: list[AssignedTimeSeries]
        """

        self._assigned_time_series = assigned_time_series

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSeriesGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
