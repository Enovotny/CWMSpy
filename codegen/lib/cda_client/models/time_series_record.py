# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeSeriesRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_time': 'int',
        'value': 'float',
        'quality_code': 'int'
    }

    attribute_map = {
        'date_time': 'date-time',
        'value': 'value',
        'quality_code': 'quality-code'
    }

    def __init__(self, date_time=None, value=None, quality_code=None):  # noqa: E501
        """TimeSeriesRecord - a model defined in Swagger"""  # noqa: E501
        self._date_time = None
        self._value = None
        self._quality_code = None
        self.discriminator = None
        if date_time is not None:
            self.date_time = date_time
        if value is not None:
            self.value = value
        if quality_code is not None:
            self.quality_code = quality_code

    @property
    def date_time(self):
        """Gets the date_time of this TimeSeriesRecord.  # noqa: E501

        Milliseconds since 1970-01-01 (Unix Epoch), always UTC  # noqa: E501

        :return: The date_time of this TimeSeriesRecord.  # noqa: E501
        :rtype: int
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this TimeSeriesRecord.

        Milliseconds since 1970-01-01 (Unix Epoch), always UTC  # noqa: E501

        :param date_time: The date_time of this TimeSeriesRecord.  # noqa: E501
        :type: int
        """

        self._date_time = date_time

    @property
    def value(self):
        """Gets the value of this TimeSeriesRecord.  # noqa: E501

        Requested time-series data value  # noqa: E501

        :return: The value of this TimeSeriesRecord.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TimeSeriesRecord.

        Requested time-series data value  # noqa: E501

        :param value: The value of this TimeSeriesRecord.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def quality_code(self):
        """Gets the quality_code of this TimeSeriesRecord.  # noqa: E501


        :return: The quality_code of this TimeSeriesRecord.  # noqa: E501
        :rtype: int
        """
        return self._quality_code

    @quality_code.setter
    def quality_code(self, quality_code):
        """Sets the quality_code of this TimeSeriesRecord.


        :param quality_code: The quality_code of this TimeSeriesRecord.  # noqa: E501
        :type: int
        """

        self._quality_code = quality_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSeriesRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
