# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Basin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'basin_name': 'str',
        'primary_stream': 'Stream',
        'sort_order': 'float',
        'basin_area': 'float',
        'contributing_area': 'float',
        'parent_basin_id': 'str'
    }

    attribute_map = {
        'office_id': 'office-id',
        'basin_name': 'basin-name',
        'primary_stream': 'primary-stream',
        'sort_order': 'sort-order',
        'basin_area': 'basin-area',
        'contributing_area': 'contributing-area',
        'parent_basin_id': 'parent-basin-id'
    }

    def __init__(self, office_id=None, basin_name=None, primary_stream=None, sort_order=None, basin_area=None, contributing_area=None, parent_basin_id=None):  # noqa: E501
        """Basin - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._basin_name = None
        self._primary_stream = None
        self._sort_order = None
        self._basin_area = None
        self._contributing_area = None
        self._parent_basin_id = None
        self.discriminator = None
        self.office_id = office_id
        if basin_name is not None:
            self.basin_name = basin_name
        if primary_stream is not None:
            self.primary_stream = primary_stream
        if sort_order is not None:
            self.sort_order = sort_order
        if basin_area is not None:
            self.basin_area = basin_area
        if contributing_area is not None:
            self.contributing_area = contributing_area
        if parent_basin_id is not None:
            self.parent_basin_id = parent_basin_id

    @property
    def office_id(self):
        """Gets the office_id of this Basin.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this Basin.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this Basin.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this Basin.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def basin_name(self):
        """Gets the basin_name of this Basin.  # noqa: E501


        :return: The basin_name of this Basin.  # noqa: E501
        :rtype: str
        """
        return self._basin_name

    @basin_name.setter
    def basin_name(self, basin_name):
        """Sets the basin_name of this Basin.


        :param basin_name: The basin_name of this Basin.  # noqa: E501
        :type: str
        """

        self._basin_name = basin_name

    @property
    def primary_stream(self):
        """Gets the primary_stream of this Basin.  # noqa: E501


        :return: The primary_stream of this Basin.  # noqa: E501
        :rtype: Stream
        """
        return self._primary_stream

    @primary_stream.setter
    def primary_stream(self, primary_stream):
        """Sets the primary_stream of this Basin.


        :param primary_stream: The primary_stream of this Basin.  # noqa: E501
        :type: Stream
        """

        self._primary_stream = primary_stream

    @property
    def sort_order(self):
        """Gets the sort_order of this Basin.  # noqa: E501


        :return: The sort_order of this Basin.  # noqa: E501
        :rtype: float
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Basin.


        :param sort_order: The sort_order of this Basin.  # noqa: E501
        :type: float
        """

        self._sort_order = sort_order

    @property
    def basin_area(self):
        """Gets the basin_area of this Basin.  # noqa: E501


        :return: The basin_area of this Basin.  # noqa: E501
        :rtype: float
        """
        return self._basin_area

    @basin_area.setter
    def basin_area(self, basin_area):
        """Sets the basin_area of this Basin.


        :param basin_area: The basin_area of this Basin.  # noqa: E501
        :type: float
        """

        self._basin_area = basin_area

    @property
    def contributing_area(self):
        """Gets the contributing_area of this Basin.  # noqa: E501


        :return: The contributing_area of this Basin.  # noqa: E501
        :rtype: float
        """
        return self._contributing_area

    @contributing_area.setter
    def contributing_area(self, contributing_area):
        """Sets the contributing_area of this Basin.


        :param contributing_area: The contributing_area of this Basin.  # noqa: E501
        :type: float
        """

        self._contributing_area = contributing_area

    @property
    def parent_basin_id(self):
        """Gets the parent_basin_id of this Basin.  # noqa: E501


        :return: The parent_basin_id of this Basin.  # noqa: E501
        :rtype: str
        """
        return self._parent_basin_id

    @parent_basin_id.setter
    def parent_basin_id(self, parent_basin_id):
        """Sets the parent_basin_id of this Basin.


        :param parent_basin_id: The parent_basin_id of this Basin.  # noqa: E501
        :type: str
        """

        self._parent_basin_id = parent_basin_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Basin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Basin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
