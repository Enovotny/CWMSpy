# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ParameterSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parameter': 'str',
        'in_range_method': 'str',
        'out_range_low_method': 'str',
        'out_range_high_method': 'str'
    }

    attribute_map = {
        'parameter': 'parameter',
        'in_range_method': 'in-range-method',
        'out_range_low_method': 'out-range-low-method',
        'out_range_high_method': 'out-range-high-method'
    }

    def __init__(self, parameter=None, in_range_method=None, out_range_low_method=None, out_range_high_method=None):  # noqa: E501
        """ParameterSpec - a model defined in Swagger"""  # noqa: E501
        self._parameter = None
        self._in_range_method = None
        self._out_range_low_method = None
        self._out_range_high_method = None
        self.discriminator = None
        if parameter is not None:
            self.parameter = parameter
        if in_range_method is not None:
            self.in_range_method = in_range_method
        if out_range_low_method is not None:
            self.out_range_low_method = out_range_low_method
        if out_range_high_method is not None:
            self.out_range_high_method = out_range_high_method

    @property
    def parameter(self):
        """Gets the parameter of this ParameterSpec.  # noqa: E501


        :return: The parameter of this ParameterSpec.  # noqa: E501
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ParameterSpec.


        :param parameter: The parameter of this ParameterSpec.  # noqa: E501
        :type: str
        """

        self._parameter = parameter

    @property
    def in_range_method(self):
        """Gets the in_range_method of this ParameterSpec.  # noqa: E501


        :return: The in_range_method of this ParameterSpec.  # noqa: E501
        :rtype: str
        """
        return self._in_range_method

    @in_range_method.setter
    def in_range_method(self, in_range_method):
        """Sets the in_range_method of this ParameterSpec.


        :param in_range_method: The in_range_method of this ParameterSpec.  # noqa: E501
        :type: str
        """

        self._in_range_method = in_range_method

    @property
    def out_range_low_method(self):
        """Gets the out_range_low_method of this ParameterSpec.  # noqa: E501


        :return: The out_range_low_method of this ParameterSpec.  # noqa: E501
        :rtype: str
        """
        return self._out_range_low_method

    @out_range_low_method.setter
    def out_range_low_method(self, out_range_low_method):
        """Sets the out_range_low_method of this ParameterSpec.


        :param out_range_low_method: The out_range_low_method of this ParameterSpec.  # noqa: E501
        :type: str
        """

        self._out_range_low_method = out_range_low_method

    @property
    def out_range_high_method(self):
        """Gets the out_range_high_method of this ParameterSpec.  # noqa: E501


        :return: The out_range_high_method of this ParameterSpec.  # noqa: E501
        :rtype: str
        """
        return self._out_range_high_method

    @out_range_high_method.setter
    def out_range_high_method(self, out_range_high_method):
        """Sets the out_range_high_method of this ParameterSpec.


        :param out_range_high_method: The out_range_high_method of this ParameterSpec.  # noqa: E501
        :type: str
        """

        self._out_range_high_method = out_range_high_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParameterSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
