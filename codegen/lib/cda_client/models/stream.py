# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Stream(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'stream_name': 'str',
        'tributaries': 'list[Stream]',
        'stream_reaches': 'list[StreamReach]',
        'diverting_stream_id': 'str',
        'receiving_stream_id': 'str',
        'confluence_bank': 'str',
        'diversion_bank': 'str',
        'stream_length': 'float',
        'confluence_station': 'float',
        'diversion_station': 'float',
        'stream_locations': 'list[StreamLocation]',
        'comment': 'str',
        'average_slope': 'float'
    }

    attribute_map = {
        'office_id': 'office-id',
        'stream_name': 'stream-name',
        'tributaries': 'tributaries',
        'stream_reaches': 'stream-reaches',
        'diverting_stream_id': 'diverting-stream-id',
        'receiving_stream_id': 'receiving-stream-id',
        'confluence_bank': 'confluence-bank',
        'diversion_bank': 'diversion-bank',
        'stream_length': 'stream-length',
        'confluence_station': 'confluence-station',
        'diversion_station': 'diversion-station',
        'stream_locations': 'stream-locations',
        'comment': 'comment',
        'average_slope': 'average-slope'
    }

    def __init__(self, office_id=None, stream_name=None, tributaries=None, stream_reaches=None, diverting_stream_id=None, receiving_stream_id=None, confluence_bank=None, diversion_bank=None, stream_length=None, confluence_station=None, diversion_station=None, stream_locations=None, comment=None, average_slope=None):  # noqa: E501
        """Stream - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._stream_name = None
        self._tributaries = None
        self._stream_reaches = None
        self._diverting_stream_id = None
        self._receiving_stream_id = None
        self._confluence_bank = None
        self._diversion_bank = None
        self._stream_length = None
        self._confluence_station = None
        self._diversion_station = None
        self._stream_locations = None
        self._comment = None
        self._average_slope = None
        self.discriminator = None
        self.office_id = office_id
        if stream_name is not None:
            self.stream_name = stream_name
        if tributaries is not None:
            self.tributaries = tributaries
        if stream_reaches is not None:
            self.stream_reaches = stream_reaches
        if diverting_stream_id is not None:
            self.diverting_stream_id = diverting_stream_id
        if receiving_stream_id is not None:
            self.receiving_stream_id = receiving_stream_id
        if confluence_bank is not None:
            self.confluence_bank = confluence_bank
        if diversion_bank is not None:
            self.diversion_bank = diversion_bank
        if stream_length is not None:
            self.stream_length = stream_length
        if confluence_station is not None:
            self.confluence_station = confluence_station
        if diversion_station is not None:
            self.diversion_station = diversion_station
        if stream_locations is not None:
            self.stream_locations = stream_locations
        if comment is not None:
            self.comment = comment
        if average_slope is not None:
            self.average_slope = average_slope

    @property
    def office_id(self):
        """Gets the office_id of this Stream.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this Stream.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this Stream.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def stream_name(self):
        """Gets the stream_name of this Stream.  # noqa: E501


        :return: The stream_name of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this Stream.


        :param stream_name: The stream_name of this Stream.  # noqa: E501
        :type: str
        """

        self._stream_name = stream_name

    @property
    def tributaries(self):
        """Gets the tributaries of this Stream.  # noqa: E501


        :return: The tributaries of this Stream.  # noqa: E501
        :rtype: list[Stream]
        """
        return self._tributaries

    @tributaries.setter
    def tributaries(self, tributaries):
        """Sets the tributaries of this Stream.


        :param tributaries: The tributaries of this Stream.  # noqa: E501
        :type: list[Stream]
        """

        self._tributaries = tributaries

    @property
    def stream_reaches(self):
        """Gets the stream_reaches of this Stream.  # noqa: E501


        :return: The stream_reaches of this Stream.  # noqa: E501
        :rtype: list[StreamReach]
        """
        return self._stream_reaches

    @stream_reaches.setter
    def stream_reaches(self, stream_reaches):
        """Sets the stream_reaches of this Stream.


        :param stream_reaches: The stream_reaches of this Stream.  # noqa: E501
        :type: list[StreamReach]
        """

        self._stream_reaches = stream_reaches

    @property
    def diverting_stream_id(self):
        """Gets the diverting_stream_id of this Stream.  # noqa: E501


        :return: The diverting_stream_id of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._diverting_stream_id

    @diverting_stream_id.setter
    def diverting_stream_id(self, diverting_stream_id):
        """Sets the diverting_stream_id of this Stream.


        :param diverting_stream_id: The diverting_stream_id of this Stream.  # noqa: E501
        :type: str
        """

        self._diverting_stream_id = diverting_stream_id

    @property
    def receiving_stream_id(self):
        """Gets the receiving_stream_id of this Stream.  # noqa: E501


        :return: The receiving_stream_id of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._receiving_stream_id

    @receiving_stream_id.setter
    def receiving_stream_id(self, receiving_stream_id):
        """Sets the receiving_stream_id of this Stream.


        :param receiving_stream_id: The receiving_stream_id of this Stream.  # noqa: E501
        :type: str
        """

        self._receiving_stream_id = receiving_stream_id

    @property
    def confluence_bank(self):
        """Gets the confluence_bank of this Stream.  # noqa: E501


        :return: The confluence_bank of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._confluence_bank

    @confluence_bank.setter
    def confluence_bank(self, confluence_bank):
        """Sets the confluence_bank of this Stream.


        :param confluence_bank: The confluence_bank of this Stream.  # noqa: E501
        :type: str
        """

        self._confluence_bank = confluence_bank

    @property
    def diversion_bank(self):
        """Gets the diversion_bank of this Stream.  # noqa: E501


        :return: The diversion_bank of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._diversion_bank

    @diversion_bank.setter
    def diversion_bank(self, diversion_bank):
        """Sets the diversion_bank of this Stream.


        :param diversion_bank: The diversion_bank of this Stream.  # noqa: E501
        :type: str
        """

        self._diversion_bank = diversion_bank

    @property
    def stream_length(self):
        """Gets the stream_length of this Stream.  # noqa: E501


        :return: The stream_length of this Stream.  # noqa: E501
        :rtype: float
        """
        return self._stream_length

    @stream_length.setter
    def stream_length(self, stream_length):
        """Sets the stream_length of this Stream.


        :param stream_length: The stream_length of this Stream.  # noqa: E501
        :type: float
        """

        self._stream_length = stream_length

    @property
    def confluence_station(self):
        """Gets the confluence_station of this Stream.  # noqa: E501


        :return: The confluence_station of this Stream.  # noqa: E501
        :rtype: float
        """
        return self._confluence_station

    @confluence_station.setter
    def confluence_station(self, confluence_station):
        """Sets the confluence_station of this Stream.


        :param confluence_station: The confluence_station of this Stream.  # noqa: E501
        :type: float
        """

        self._confluence_station = confluence_station

    @property
    def diversion_station(self):
        """Gets the diversion_station of this Stream.  # noqa: E501


        :return: The diversion_station of this Stream.  # noqa: E501
        :rtype: float
        """
        return self._diversion_station

    @diversion_station.setter
    def diversion_station(self, diversion_station):
        """Sets the diversion_station of this Stream.


        :param diversion_station: The diversion_station of this Stream.  # noqa: E501
        :type: float
        """

        self._diversion_station = diversion_station

    @property
    def stream_locations(self):
        """Gets the stream_locations of this Stream.  # noqa: E501


        :return: The stream_locations of this Stream.  # noqa: E501
        :rtype: list[StreamLocation]
        """
        return self._stream_locations

    @stream_locations.setter
    def stream_locations(self, stream_locations):
        """Sets the stream_locations of this Stream.


        :param stream_locations: The stream_locations of this Stream.  # noqa: E501
        :type: list[StreamLocation]
        """

        self._stream_locations = stream_locations

    @property
    def comment(self):
        """Gets the comment of this Stream.  # noqa: E501


        :return: The comment of this Stream.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Stream.


        :param comment: The comment of this Stream.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def average_slope(self):
        """Gets the average_slope of this Stream.  # noqa: E501


        :return: The average_slope of this Stream.  # noqa: E501
        :rtype: float
        """
        return self._average_slope

    @average_slope.setter
    def average_slope(self, average_slope):
        """Sets the average_slope of this Stream.


        :param average_slope: The average_slope of this Stream.  # noqa: E501
        :type: float
        """

        self._average_slope = average_slope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stream, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
