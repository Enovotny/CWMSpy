# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssignedTimeSeries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timeseries_id': 'str',
        'ts_code': 'float',
        'alias_id': 'str',
        'ref_ts_id': 'str',
        'attribute': 'int'
    }

    attribute_map = {
        'timeseries_id': 'timeseriesId',
        'ts_code': 'tsCode',
        'alias_id': 'aliasId',
        'ref_ts_id': 'refTsId',
        'attribute': 'attribute'
    }

    def __init__(self, timeseries_id=None, ts_code=None, alias_id=None, ref_ts_id=None, attribute=None):  # noqa: E501
        """AssignedTimeSeries - a model defined in Swagger"""  # noqa: E501
        self._timeseries_id = None
        self._ts_code = None
        self._alias_id = None
        self._ref_ts_id = None
        self._attribute = None
        self.discriminator = None
        if timeseries_id is not None:
            self.timeseries_id = timeseries_id
        if ts_code is not None:
            self.ts_code = ts_code
        if alias_id is not None:
            self.alias_id = alias_id
        if ref_ts_id is not None:
            self.ref_ts_id = ref_ts_id
        if attribute is not None:
            self.attribute = attribute

    @property
    def timeseries_id(self):
        """Gets the timeseries_id of this AssignedTimeSeries.  # noqa: E501


        :return: The timeseries_id of this AssignedTimeSeries.  # noqa: E501
        :rtype: str
        """
        return self._timeseries_id

    @timeseries_id.setter
    def timeseries_id(self, timeseries_id):
        """Sets the timeseries_id of this AssignedTimeSeries.


        :param timeseries_id: The timeseries_id of this AssignedTimeSeries.  # noqa: E501
        :type: str
        """

        self._timeseries_id = timeseries_id

    @property
    def ts_code(self):
        """Gets the ts_code of this AssignedTimeSeries.  # noqa: E501


        :return: The ts_code of this AssignedTimeSeries.  # noqa: E501
        :rtype: float
        """
        return self._ts_code

    @ts_code.setter
    def ts_code(self, ts_code):
        """Sets the ts_code of this AssignedTimeSeries.


        :param ts_code: The ts_code of this AssignedTimeSeries.  # noqa: E501
        :type: float
        """

        self._ts_code = ts_code

    @property
    def alias_id(self):
        """Gets the alias_id of this AssignedTimeSeries.  # noqa: E501


        :return: The alias_id of this AssignedTimeSeries.  # noqa: E501
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """Sets the alias_id of this AssignedTimeSeries.


        :param alias_id: The alias_id of this AssignedTimeSeries.  # noqa: E501
        :type: str
        """

        self._alias_id = alias_id

    @property
    def ref_ts_id(self):
        """Gets the ref_ts_id of this AssignedTimeSeries.  # noqa: E501


        :return: The ref_ts_id of this AssignedTimeSeries.  # noqa: E501
        :rtype: str
        """
        return self._ref_ts_id

    @ref_ts_id.setter
    def ref_ts_id(self, ref_ts_id):
        """Sets the ref_ts_id of this AssignedTimeSeries.


        :param ref_ts_id: The ref_ts_id of this AssignedTimeSeries.  # noqa: E501
        :type: str
        """

        self._ref_ts_id = ref_ts_id

    @property
    def attribute(self):
        """Gets the attribute of this AssignedTimeSeries.  # noqa: E501


        :return: The attribute of this AssignedTimeSeries.  # noqa: E501
        :rtype: int
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this AssignedTimeSeries.


        :param attribute: The attribute of this AssignedTimeSeries.  # noqa: E501
        :type: int
        """

        self._attribute = attribute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignedTimeSeries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignedTimeSeries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
