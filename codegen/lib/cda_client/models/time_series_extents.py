# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeSeriesExtents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'earliest_time': 'datetime',
        'last_update': 'datetime',
        'latest_time': 'datetime',
        'version_time': 'datetime'
    }

    attribute_map = {
        'earliest_time': 'earliest-time',
        'last_update': 'last-update',
        'latest_time': 'latest-time',
        'version_time': 'version-time'
    }

    def __init__(self, earliest_time=None, last_update=None, latest_time=None, version_time=None):  # noqa: E501
        """TimeSeriesExtents - a model defined in Swagger"""  # noqa: E501
        self._earliest_time = None
        self._last_update = None
        self._latest_time = None
        self._version_time = None
        self.discriminator = None
        if earliest_time is not None:
            self.earliest_time = earliest_time
        if last_update is not None:
            self.last_update = last_update
        if latest_time is not None:
            self.latest_time = latest_time
        if version_time is not None:
            self.version_time = version_time

    @property
    def earliest_time(self):
        """Gets the earliest_time of this TimeSeriesExtents.  # noqa: E501

        Earliest value in the timeseries  # noqa: E501

        :return: The earliest_time of this TimeSeriesExtents.  # noqa: E501
        :rtype: datetime
        """
        return self._earliest_time

    @earliest_time.setter
    def earliest_time(self, earliest_time):
        """Sets the earliest_time of this TimeSeriesExtents.

        Earliest value in the timeseries  # noqa: E501

        :param earliest_time: The earliest_time of this TimeSeriesExtents.  # noqa: E501
        :type: datetime
        """

        self._earliest_time = earliest_time

    @property
    def last_update(self):
        """Gets the last_update of this TimeSeriesExtents.  # noqa: E501

        Last update in the timeseries  # noqa: E501

        :return: The last_update of this TimeSeriesExtents.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this TimeSeriesExtents.

        Last update in the timeseries  # noqa: E501

        :param last_update: The last_update of this TimeSeriesExtents.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def latest_time(self):
        """Gets the latest_time of this TimeSeriesExtents.  # noqa: E501

        Latest value in the timeseries  # noqa: E501

        :return: The latest_time of this TimeSeriesExtents.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_time

    @latest_time.setter
    def latest_time(self, latest_time):
        """Sets the latest_time of this TimeSeriesExtents.

        Latest value in the timeseries  # noqa: E501

        :param latest_time: The latest_time of this TimeSeriesExtents.  # noqa: E501
        :type: datetime
        """

        self._latest_time = latest_time

    @property
    def version_time(self):
        """Gets the version_time of this TimeSeriesExtents.  # noqa: E501

        TimeSeries version to which this extent information applies  # noqa: E501

        :return: The version_time of this TimeSeriesExtents.  # noqa: E501
        :rtype: datetime
        """
        return self._version_time

    @version_time.setter
    def version_time(self, version_time):
        """Sets the version_time of this TimeSeriesExtents.

        TimeSeries version to which this extent information applies  # noqa: E501

        :param version_time: The version_time of this TimeSeriesExtents.  # noqa: E501
        :type: datetime
        """

        self._version_time = version_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSeriesExtents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesExtents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
