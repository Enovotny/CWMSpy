# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'id': 'str',
        'location_category': 'LocationCategory',
        'description': 'str',
        'shared_loc_alias_id': 'str',
        'shared_ref_location_id': 'str',
        'loc_group_attribute': 'float',
        'assigned_locations': 'list[AssignedLocation]'
    }

    attribute_map = {
        'office_id': 'office-id',
        'id': 'id',
        'location_category': 'location-category',
        'description': 'description',
        'shared_loc_alias_id': 'shared-loc-alias-id',
        'shared_ref_location_id': 'shared-ref-location-id',
        'loc_group_attribute': 'loc-group-attribute',
        'assigned_locations': 'assigned-locations'
    }

    def __init__(self, office_id=None, id=None, location_category=None, description=None, shared_loc_alias_id=None, shared_ref_location_id=None, loc_group_attribute=None, assigned_locations=None):  # noqa: E501
        """LocationGroup - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._id = None
        self._location_category = None
        self._description = None
        self._shared_loc_alias_id = None
        self._shared_ref_location_id = None
        self._loc_group_attribute = None
        self._assigned_locations = None
        self.discriminator = None
        self.office_id = office_id
        if id is not None:
            self.id = id
        if location_category is not None:
            self.location_category = location_category
        if description is not None:
            self.description = description
        if shared_loc_alias_id is not None:
            self.shared_loc_alias_id = shared_loc_alias_id
        if shared_ref_location_id is not None:
            self.shared_ref_location_id = shared_ref_location_id
        if loc_group_attribute is not None:
            self.loc_group_attribute = loc_group_attribute
        if assigned_locations is not None:
            self.assigned_locations = assigned_locations

    @property
    def office_id(self):
        """Gets the office_id of this LocationGroup.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this LocationGroup.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this LocationGroup.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this LocationGroup.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def id(self):
        """Gets the id of this LocationGroup.  # noqa: E501


        :return: The id of this LocationGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocationGroup.


        :param id: The id of this LocationGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location_category(self):
        """Gets the location_category of this LocationGroup.  # noqa: E501


        :return: The location_category of this LocationGroup.  # noqa: E501
        :rtype: LocationCategory
        """
        return self._location_category

    @location_category.setter
    def location_category(self, location_category):
        """Sets the location_category of this LocationGroup.


        :param location_category: The location_category of this LocationGroup.  # noqa: E501
        :type: LocationCategory
        """

        self._location_category = location_category

    @property
    def description(self):
        """Gets the description of this LocationGroup.  # noqa: E501


        :return: The description of this LocationGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LocationGroup.


        :param description: The description of this LocationGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def shared_loc_alias_id(self):
        """Gets the shared_loc_alias_id of this LocationGroup.  # noqa: E501


        :return: The shared_loc_alias_id of this LocationGroup.  # noqa: E501
        :rtype: str
        """
        return self._shared_loc_alias_id

    @shared_loc_alias_id.setter
    def shared_loc_alias_id(self, shared_loc_alias_id):
        """Sets the shared_loc_alias_id of this LocationGroup.


        :param shared_loc_alias_id: The shared_loc_alias_id of this LocationGroup.  # noqa: E501
        :type: str
        """

        self._shared_loc_alias_id = shared_loc_alias_id

    @property
    def shared_ref_location_id(self):
        """Gets the shared_ref_location_id of this LocationGroup.  # noqa: E501


        :return: The shared_ref_location_id of this LocationGroup.  # noqa: E501
        :rtype: str
        """
        return self._shared_ref_location_id

    @shared_ref_location_id.setter
    def shared_ref_location_id(self, shared_ref_location_id):
        """Sets the shared_ref_location_id of this LocationGroup.


        :param shared_ref_location_id: The shared_ref_location_id of this LocationGroup.  # noqa: E501
        :type: str
        """

        self._shared_ref_location_id = shared_ref_location_id

    @property
    def loc_group_attribute(self):
        """Gets the loc_group_attribute of this LocationGroup.  # noqa: E501


        :return: The loc_group_attribute of this LocationGroup.  # noqa: E501
        :rtype: float
        """
        return self._loc_group_attribute

    @loc_group_attribute.setter
    def loc_group_attribute(self, loc_group_attribute):
        """Sets the loc_group_attribute of this LocationGroup.


        :param loc_group_attribute: The loc_group_attribute of this LocationGroup.  # noqa: E501
        :type: float
        """

        self._loc_group_attribute = loc_group_attribute

    @property
    def assigned_locations(self):
        """Gets the assigned_locations of this LocationGroup.  # noqa: E501


        :return: The assigned_locations of this LocationGroup.  # noqa: E501
        :rtype: list[AssignedLocation]
        """
        return self._assigned_locations

    @assigned_locations.setter
    def assigned_locations(self, assigned_locations):
        """Sets the assigned_locations of this LocationGroup.


        :param assigned_locations: The assigned_locations of this LocationGroup.  # noqa: E501
        :type: list[AssignedLocation]
        """

        self._assigned_locations = assigned_locations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
