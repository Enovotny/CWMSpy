# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationCatalogEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office': 'str',
        'name': 'str',
        'nearest_city': 'str',
        'public_name': 'str',
        'long_name': 'str',
        'description': 'str',
        'kind': 'str',
        'type': 'str',
        'time_zone': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'published_latitude': 'float',
        'published_longitude': 'float',
        'horizontal_datum': 'str',
        'elevation': 'float',
        'unit': 'str',
        'vertical_datum': 'str',
        'nation': 'str',
        'state': 'str',
        'county': 'str',
        'bounding_office': 'str',
        'map_label': 'str',
        'active': 'bool',
        'aliases': 'list[LocationAlias]'
    }

    attribute_map = {
        'office': 'office',
        'name': 'name',
        'nearest_city': 'nearestCity',
        'public_name': 'publicName',
        'long_name': 'longName',
        'description': 'description',
        'kind': 'kind',
        'type': 'type',
        'time_zone': 'timeZone',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'published_latitude': 'publishedLatitude',
        'published_longitude': 'publishedLongitude',
        'horizontal_datum': 'horizontalDatum',
        'elevation': 'elevation',
        'unit': 'unit',
        'vertical_datum': 'verticalDatum',
        'nation': 'nation',
        'state': 'state',
        'county': 'county',
        'bounding_office': 'boundingOffice',
        'map_label': 'mapLabel',
        'active': 'active',
        'aliases': 'aliases'
    }

    def __init__(self, office=None, name=None, nearest_city=None, public_name=None, long_name=None, description=None, kind=None, type=None, time_zone=None, latitude=None, longitude=None, published_latitude=None, published_longitude=None, horizontal_datum=None, elevation=None, unit=None, vertical_datum=None, nation=None, state=None, county=None, bounding_office=None, map_label=None, active=None, aliases=None):  # noqa: E501
        """LocationCatalogEntry - a model defined in Swagger"""  # noqa: E501
        self._office = None
        self._name = None
        self._nearest_city = None
        self._public_name = None
        self._long_name = None
        self._description = None
        self._kind = None
        self._type = None
        self._time_zone = None
        self._latitude = None
        self._longitude = None
        self._published_latitude = None
        self._published_longitude = None
        self._horizontal_datum = None
        self._elevation = None
        self._unit = None
        self._vertical_datum = None
        self._nation = None
        self._state = None
        self._county = None
        self._bounding_office = None
        self._map_label = None
        self._active = None
        self._aliases = None
        self.discriminator = None
        if office is not None:
            self.office = office
        if name is not None:
            self.name = name
        if nearest_city is not None:
            self.nearest_city = nearest_city
        if public_name is not None:
            self.public_name = public_name
        if long_name is not None:
            self.long_name = long_name
        if description is not None:
            self.description = description
        if kind is not None:
            self.kind = kind
        if type is not None:
            self.type = type
        if time_zone is not None:
            self.time_zone = time_zone
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if published_latitude is not None:
            self.published_latitude = published_latitude
        if published_longitude is not None:
            self.published_longitude = published_longitude
        if horizontal_datum is not None:
            self.horizontal_datum = horizontal_datum
        if elevation is not None:
            self.elevation = elevation
        if unit is not None:
            self.unit = unit
        if vertical_datum is not None:
            self.vertical_datum = vertical_datum
        if nation is not None:
            self.nation = nation
        if state is not None:
            self.state = state
        if county is not None:
            self.county = county
        if bounding_office is not None:
            self.bounding_office = bounding_office
        if map_label is not None:
            self.map_label = map_label
        if active is not None:
            self.active = active
        if aliases is not None:
            self.aliases = aliases

    @property
    def office(self):
        """Gets the office of this LocationCatalogEntry.  # noqa: E501


        :return: The office of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this LocationCatalogEntry.


        :param office: The office of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._office = office

    @property
    def name(self):
        """Gets the name of this LocationCatalogEntry.  # noqa: E501


        :return: The name of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationCatalogEntry.


        :param name: The name of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nearest_city(self):
        """Gets the nearest_city of this LocationCatalogEntry.  # noqa: E501


        :return: The nearest_city of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._nearest_city

    @nearest_city.setter
    def nearest_city(self, nearest_city):
        """Sets the nearest_city of this LocationCatalogEntry.


        :param nearest_city: The nearest_city of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._nearest_city = nearest_city

    @property
    def public_name(self):
        """Gets the public_name of this LocationCatalogEntry.  # noqa: E501


        :return: The public_name of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name):
        """Sets the public_name of this LocationCatalogEntry.


        :param public_name: The public_name of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._public_name = public_name

    @property
    def long_name(self):
        """Gets the long_name of this LocationCatalogEntry.  # noqa: E501


        :return: The long_name of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this LocationCatalogEntry.


        :param long_name: The long_name of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def description(self):
        """Gets the description of this LocationCatalogEntry.  # noqa: E501


        :return: The description of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LocationCatalogEntry.


        :param description: The description of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def kind(self):
        """Gets the kind of this LocationCatalogEntry.  # noqa: E501


        :return: The kind of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LocationCatalogEntry.


        :param kind: The kind of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def type(self):
        """Gets the type of this LocationCatalogEntry.  # noqa: E501


        :return: The type of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LocationCatalogEntry.


        :param type: The type of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def time_zone(self):
        """Gets the time_zone of this LocationCatalogEntry.  # noqa: E501


        :return: The time_zone of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this LocationCatalogEntry.


        :param time_zone: The time_zone of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def latitude(self):
        """Gets the latitude of this LocationCatalogEntry.  # noqa: E501


        :return: The latitude of this LocationCatalogEntry.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this LocationCatalogEntry.


        :param latitude: The latitude of this LocationCatalogEntry.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this LocationCatalogEntry.  # noqa: E501


        :return: The longitude of this LocationCatalogEntry.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this LocationCatalogEntry.


        :param longitude: The longitude of this LocationCatalogEntry.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def published_latitude(self):
        """Gets the published_latitude of this LocationCatalogEntry.  # noqa: E501


        :return: The published_latitude of this LocationCatalogEntry.  # noqa: E501
        :rtype: float
        """
        return self._published_latitude

    @published_latitude.setter
    def published_latitude(self, published_latitude):
        """Sets the published_latitude of this LocationCatalogEntry.


        :param published_latitude: The published_latitude of this LocationCatalogEntry.  # noqa: E501
        :type: float
        """

        self._published_latitude = published_latitude

    @property
    def published_longitude(self):
        """Gets the published_longitude of this LocationCatalogEntry.  # noqa: E501


        :return: The published_longitude of this LocationCatalogEntry.  # noqa: E501
        :rtype: float
        """
        return self._published_longitude

    @published_longitude.setter
    def published_longitude(self, published_longitude):
        """Sets the published_longitude of this LocationCatalogEntry.


        :param published_longitude: The published_longitude of this LocationCatalogEntry.  # noqa: E501
        :type: float
        """

        self._published_longitude = published_longitude

    @property
    def horizontal_datum(self):
        """Gets the horizontal_datum of this LocationCatalogEntry.  # noqa: E501


        :return: The horizontal_datum of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._horizontal_datum

    @horizontal_datum.setter
    def horizontal_datum(self, horizontal_datum):
        """Sets the horizontal_datum of this LocationCatalogEntry.


        :param horizontal_datum: The horizontal_datum of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._horizontal_datum = horizontal_datum

    @property
    def elevation(self):
        """Gets the elevation of this LocationCatalogEntry.  # noqa: E501


        :return: The elevation of this LocationCatalogEntry.  # noqa: E501
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this LocationCatalogEntry.


        :param elevation: The elevation of this LocationCatalogEntry.  # noqa: E501
        :type: float
        """

        self._elevation = elevation

    @property
    def unit(self):
        """Gets the unit of this LocationCatalogEntry.  # noqa: E501


        :return: The unit of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this LocationCatalogEntry.


        :param unit: The unit of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def vertical_datum(self):
        """Gets the vertical_datum of this LocationCatalogEntry.  # noqa: E501


        :return: The vertical_datum of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._vertical_datum

    @vertical_datum.setter
    def vertical_datum(self, vertical_datum):
        """Sets the vertical_datum of this LocationCatalogEntry.


        :param vertical_datum: The vertical_datum of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._vertical_datum = vertical_datum

    @property
    def nation(self):
        """Gets the nation of this LocationCatalogEntry.  # noqa: E501


        :return: The nation of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._nation

    @nation.setter
    def nation(self, nation):
        """Sets the nation of this LocationCatalogEntry.


        :param nation: The nation of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._nation = nation

    @property
    def state(self):
        """Gets the state of this LocationCatalogEntry.  # noqa: E501


        :return: The state of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LocationCatalogEntry.


        :param state: The state of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def county(self):
        """Gets the county of this LocationCatalogEntry.  # noqa: E501


        :return: The county of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this LocationCatalogEntry.


        :param county: The county of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def bounding_office(self):
        """Gets the bounding_office of this LocationCatalogEntry.  # noqa: E501


        :return: The bounding_office of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._bounding_office

    @bounding_office.setter
    def bounding_office(self, bounding_office):
        """Sets the bounding_office of this LocationCatalogEntry.


        :param bounding_office: The bounding_office of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._bounding_office = bounding_office

    @property
    def map_label(self):
        """Gets the map_label of this LocationCatalogEntry.  # noqa: E501


        :return: The map_label of this LocationCatalogEntry.  # noqa: E501
        :rtype: str
        """
        return self._map_label

    @map_label.setter
    def map_label(self, map_label):
        """Sets the map_label of this LocationCatalogEntry.


        :param map_label: The map_label of this LocationCatalogEntry.  # noqa: E501
        :type: str
        """

        self._map_label = map_label

    @property
    def active(self):
        """Gets the active of this LocationCatalogEntry.  # noqa: E501


        :return: The active of this LocationCatalogEntry.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this LocationCatalogEntry.


        :param active: The active of this LocationCatalogEntry.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def aliases(self):
        """Gets the aliases of this LocationCatalogEntry.  # noqa: E501


        :return: The aliases of this LocationCatalogEntry.  # noqa: E501
        :rtype: list[LocationAlias]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this LocationCatalogEntry.


        :param aliases: The aliases of this LocationCatalogEntry.  # noqa: E501
        :type: list[LocationAlias]
        """

        self._aliases = aliases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationCatalogEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationCatalogEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
