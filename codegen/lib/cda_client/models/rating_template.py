# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RatingTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'id': 'str',
        'version': 'str',
        'description': 'str',
        'dependent_parameter': 'str',
        'independent_parameter_specs': 'list[ParameterSpec]',
        'rating_ids': 'list[str]'
    }

    attribute_map = {
        'office_id': 'office-id',
        'id': 'id',
        'version': 'version',
        'description': 'description',
        'dependent_parameter': 'dependent-parameter',
        'independent_parameter_specs': 'independent-parameter-specs',
        'rating_ids': 'rating-ids'
    }

    def __init__(self, office_id=None, id=None, version=None, description=None, dependent_parameter=None, independent_parameter_specs=None, rating_ids=None):  # noqa: E501
        """RatingTemplate - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._id = None
        self._version = None
        self._description = None
        self._dependent_parameter = None
        self._independent_parameter_specs = None
        self._rating_ids = None
        self.discriminator = None
        self.office_id = office_id
        if id is not None:
            self.id = id
        if version is not None:
            self.version = version
        if description is not None:
            self.description = description
        if dependent_parameter is not None:
            self.dependent_parameter = dependent_parameter
        if independent_parameter_specs is not None:
            self.independent_parameter_specs = independent_parameter_specs
        if rating_ids is not None:
            self.rating_ids = rating_ids

    @property
    def office_id(self):
        """Gets the office_id of this RatingTemplate.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this RatingTemplate.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this RatingTemplate.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this RatingTemplate.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def id(self):
        """Gets the id of this RatingTemplate.  # noqa: E501


        :return: The id of this RatingTemplate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RatingTemplate.


        :param id: The id of this RatingTemplate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version(self):
        """Gets the version of this RatingTemplate.  # noqa: E501


        :return: The version of this RatingTemplate.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RatingTemplate.


        :param version: The version of this RatingTemplate.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def description(self):
        """Gets the description of this RatingTemplate.  # noqa: E501


        :return: The description of this RatingTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RatingTemplate.


        :param description: The description of this RatingTemplate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dependent_parameter(self):
        """Gets the dependent_parameter of this RatingTemplate.  # noqa: E501


        :return: The dependent_parameter of this RatingTemplate.  # noqa: E501
        :rtype: str
        """
        return self._dependent_parameter

    @dependent_parameter.setter
    def dependent_parameter(self, dependent_parameter):
        """Sets the dependent_parameter of this RatingTemplate.


        :param dependent_parameter: The dependent_parameter of this RatingTemplate.  # noqa: E501
        :type: str
        """

        self._dependent_parameter = dependent_parameter

    @property
    def independent_parameter_specs(self):
        """Gets the independent_parameter_specs of this RatingTemplate.  # noqa: E501


        :return: The independent_parameter_specs of this RatingTemplate.  # noqa: E501
        :rtype: list[ParameterSpec]
        """
        return self._independent_parameter_specs

    @independent_parameter_specs.setter
    def independent_parameter_specs(self, independent_parameter_specs):
        """Sets the independent_parameter_specs of this RatingTemplate.


        :param independent_parameter_specs: The independent_parameter_specs of this RatingTemplate.  # noqa: E501
        :type: list[ParameterSpec]
        """

        self._independent_parameter_specs = independent_parameter_specs

    @property
    def rating_ids(self):
        """Gets the rating_ids of this RatingTemplate.  # noqa: E501


        :return: The rating_ids of this RatingTemplate.  # noqa: E501
        :rtype: list[str]
        """
        return self._rating_ids

    @rating_ids.setter
    def rating_ids(self, rating_ids):
        """Sets the rating_ids of this RatingTemplate.


        :param rating_ids: The rating_ids of this RatingTemplate.  # noqa: E501
        :type: list[str]
        """

        self._rating_ids = rating_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RatingTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatingTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
