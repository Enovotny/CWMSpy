# coding: utf-8

"""
    CWMS Data API

    CWMS REST API for Data Retrieval  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeSeriesIdentifierDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'office_id': 'str',
        'time_series_id': 'str',
        'timezone_name': 'str',
        'interval_offset_minutes': 'int',
        'active': 'bool'
    }

    attribute_map = {
        'office_id': 'office-id',
        'time_series_id': 'time-series-id',
        'timezone_name': 'timezone-name',
        'interval_offset_minutes': 'interval-offset-minutes',
        'active': 'active'
    }

    def __init__(self, office_id=None, time_series_id=None, timezone_name=None, interval_offset_minutes=None, active=None):  # noqa: E501
        """TimeSeriesIdentifierDescriptor - a model defined in Swagger"""  # noqa: E501
        self._office_id = None
        self._time_series_id = None
        self._timezone_name = None
        self._interval_offset_minutes = None
        self._active = None
        self.discriminator = None
        self.office_id = office_id
        if time_series_id is not None:
            self.time_series_id = time_series_id
        if timezone_name is not None:
            self.timezone_name = timezone_name
        if interval_offset_minutes is not None:
            self.interval_offset_minutes = interval_offset_minutes
        if active is not None:
            self.active = active

    @property
    def office_id(self):
        """Gets the office_id of this TimeSeriesIdentifierDescriptor.  # noqa: E501

        Owning office of object.  # noqa: E501

        :return: The office_id of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this TimeSeriesIdentifierDescriptor.

        Owning office of object.  # noqa: E501

        :param office_id: The office_id of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :type: str
        """
        if office_id is None:
            raise ValueError("Invalid value for `office_id`, must not be `None`")  # noqa: E501

        self._office_id = office_id

    @property
    def time_series_id(self):
        """Gets the time_series_id of this TimeSeriesIdentifierDescriptor.  # noqa: E501


        :return: The time_series_id of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._time_series_id

    @time_series_id.setter
    def time_series_id(self, time_series_id):
        """Sets the time_series_id of this TimeSeriesIdentifierDescriptor.


        :param time_series_id: The time_series_id of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :type: str
        """

        self._time_series_id = time_series_id

    @property
    def timezone_name(self):
        """Gets the timezone_name of this TimeSeriesIdentifierDescriptor.  # noqa: E501


        :return: The timezone_name of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._timezone_name

    @timezone_name.setter
    def timezone_name(self, timezone_name):
        """Sets the timezone_name of this TimeSeriesIdentifierDescriptor.


        :param timezone_name: The timezone_name of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :type: str
        """

        self._timezone_name = timezone_name

    @property
    def interval_offset_minutes(self):
        """Gets the interval_offset_minutes of this TimeSeriesIdentifierDescriptor.  # noqa: E501


        :return: The interval_offset_minutes of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._interval_offset_minutes

    @interval_offset_minutes.setter
    def interval_offset_minutes(self, interval_offset_minutes):
        """Sets the interval_offset_minutes of this TimeSeriesIdentifierDescriptor.


        :param interval_offset_minutes: The interval_offset_minutes of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :type: int
        """

        self._interval_offset_minutes = interval_offset_minutes

    @property
    def active(self):
        """Gets the active of this TimeSeriesIdentifierDescriptor.  # noqa: E501


        :return: The active of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TimeSeriesIdentifierDescriptor.


        :param active: The active of this TimeSeriesIdentifierDescriptor.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSeriesIdentifierDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesIdentifierDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
